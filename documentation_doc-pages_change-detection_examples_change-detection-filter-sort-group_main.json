{
  "eventHandlers": [
    {
      "name": "cellValueChanged",
      "handlerName": "onCellValueChanged",
      "handler": "function onCellValueChanged(params) {\n    var changedData = [params.data];\n    params.api.applyTransaction({ update: changedData });\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // do NOT hide this column, it's needed for editing\n    { field: 'group', rowGroup: true, editable: true },\n    { field: 'a', type: 'valueColumn' },\n    { field: 'b', type: 'valueColumn' },\n    { field: 'c', type: 'valueColumn' },\n    { field: 'd', type: 'valueColumn' },\n    {\n        headerName: 'Total',\n        type: 'totalColumn',\n        // we use getValue() instead of data.a so that it gets the aggregated values at the group level\n        valueGetter: 'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")',\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    sortable: true,\n    filter: true,\n}"
    },
    { "name": "autoGroupColumnDef", "value": "{\n    minWidth: 100,\n}" },
    {
      "name": "columnTypes",
      "value": "{\n    valueColumn: {\n        editable: true,\n        aggFunc: 'sum',\n        valueParser: 'Number(newValue)',\n        cellClass: 'number-cell',\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n        filter: 'agNumberColumnFilter',\n    },\n    totalColumn: {\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n        cellClass: 'number-cell',\n    },\n}"
    },
    { "name": "rowData", "value": "getRowData()" },
    { "name": "groupDefaultExpanded", "value": "1" },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    { "name": "animateRows", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    sortable: true,\n    filter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'group',\n    rowGroup: true,\n    editable: true },\n    {\n        field: 'a',\n    type: 'valueColumn' },\n    {\n        field: 'b',\n    type: 'valueColumn' },\n    {\n        field: 'c',\n    type: 'valueColumn' },\n    {\n        field: 'd',\n    type: 'valueColumn' },\n    {\n        headerName: 'Total',\n    type: 'totalColumn',\n    // we use getValue() instead of data.a so that it gets the aggregated values at the group level\nvalueGetter: 'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function getRowData() {\n    var rowData = [];\n    for (var i = 1; i <= 10; i++) {\n        rowData.push({\n            group: i < 5 ? 'A' : 'B',\n            a: (i * 863) % 100,\n            b: (i * 811) % 100,\n            c: (i * 743) % 100,\n            d: (i * 677) % 100,\n        });\n    }\n    return rowData;\n}"
  ],
  "callbackDependencies": {},
  "template": "\n\nGRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true
  }
}
