{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'id' },\n    { field: 'athlete', width: 150 },\n    { field: 'age' },\n    { field: 'country' },\n    { field: 'year' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true,\n}"
    },
    {
      "name": "components",
      "value": "{\n    customLoadingCellRenderer: CustomLoadingCellRenderer,\n}"
    },
    { "name": "loadingCellRenderer", "value": "'customLoadingCellRenderer'" },
    {
      "name": "loadingCellRendererParams",
      "value": "{\n    loadingMessage: 'One moment please...',\n}"
    },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "cacheBlockSize", "value": "100" },
    { "name": "maxBlocksInCache", "value": "10" },
    { "name": "animateRows", "value": "true" },
    { "name": "debug", "value": "true" }
  ],
  "components": [
    {
      "name": "customLoadingCellRenderer",
      "value": "CustomLoadingCellRenderer"
    }
  ],
  "defaultColDef": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true,\n}",
  "globalComponents": ["loadingCellRenderer: 'customLoadingCellRenderer'"],
  "parsedColDefs": "[{ field: 'id' },\n    {\n        field: 'athlete',\n    width: 150 },\n    { field: 'age' },\n    { field: 'country' },\n    { field: 'year' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function getServerSideDatasource(server) {\n    return {\n        getRows: params => {\n            // adding delay to simulate real server call\n            setTimeout(() => {\n                const response = server.getResponse(params.request);\n                if (response.success) {\n                    // call the success callback\n                    params.successCallback(response.rows, response.lastRow);\n                }\n                else {\n                    // inform the grid request failed\n                    params.failCallback();\n                }\n            }, 2000);\n        },\n    };\n}",
    "function getFakeServer(allData) {\n    return {\n        getResponse: (request) => {\n            console.log('asking for rows: ' + request.startRow + ' to ' + request.endRow);\n            // take a slice of the total rows\n            const rowsThisPage = allData.slice(request.startRow, request.endRow);\n            // if on or after the last page, work out the last row.\n            const lastRow = allData.length <= (request.endRow || 0) ? allData.length : -1;\n            return {\n                success: true,\n                rows: rowsThisPage,\n                lastRow: lastRow,\n            };\n        },\n    };\n}"
  ],
  "callbackDependencies": {
    "getServerSideDatasource": ["params", "setTimeout"],
    "getFakeServer": ["request"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // add id to data\n    let idSequence = 0;\n    data.forEach((item) => {\n        item.id = idSequence++;\n    });\n    const server = getFakeServer(data);\n    const datasource = getServerSideDatasource(server);\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "<div style=\"height: 100%; padding-top: 25px; box-sizing: border-box;\">\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "extras": ["fontawesome"]
  }
}
