{
  "eventHandlers": [],
  "properties": [
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}"
    },
    { "name": "suppressExcelExport", "value": "true" },
    { "name": "popupParent", "value": "document.body" },
    {
      "name": "columnDefs",
      "value": "[{ field: 'make' }, { field: 'model' }, { field: 'price' }]"
    },
    {
      "name": "rowData",
      "value": "[\n    { make: 'Toyota', model: 'Celica', price: 35000 },\n    { make: 'Ford', model: 'Mondeo', price: 32000 },\n    { make: 'Porsche', model: 'Boxter', price: 72000 },\n]"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    editable: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{ field: 'make' },\n    { field: 'model' },\n    { field: 'price' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtnExport",
      "params": "",
      "body": "function onBtnExport() {\n    var params = getParams();\n    if (params.suppressQuotes || params.columnSeparator) {\n        alert('NOTE: you are downloading a file with non-standard quotes or separators - it may not render correctly in Excel.');\n    }\n    this.gridApi.exportDataAsCsv(params);\n}"
    },
    {
      "name": "onBtnUpdate",
      "params": "",
      "body": "function onBtnUpdate() {\n    (document.querySelector('#csvResult')).value = this.gridApi.getDataAsCsv(getParams());\n}"
    }
  ],
  "utils": [
    "function getValue(inputSelector) {\n    var text = (document.querySelector(inputSelector)).value;\n    switch (text) {\n        case 'string':\n            return ('Here is a comma, and a some \"quotes\". You can see them using the\\n' +\n                'api.getDataAsCsv() button but they will not be visible when the downloaded\\n' +\n                'CSV file is opened in Excel because string content passed to\\n' +\n                'prependContent and appendContent is not escaped.');\n        case 'array':\n            return [\n                [],\n                [\n                    {\n                        data: {\n                            value: 'Here is a comma, and a some \"quotes\".',\n                            type: 'String',\n                        },\n                    },\n                ],\n                [\n                    {\n                        data: {\n                            value: 'They are visible when the downloaded CSV file is opened in Excel because custom content is properly escaped (provided that suppressQuotes is not set to true)',\n                            type: 'String',\n                        },\n                    },\n                ],\n                [\n                    { data: { value: 'this cell:', type: 'String' }, mergeAcross: 1 },\n                    {\n                        data: {\n                            value: 'is empty because the first cell has mergeAcross=1',\n                            type: 'String',\n                        },\n                    },\n                ],\n                [],\n            ];\n        case 'none':\n            return;\n        default:\n            return text;\n    }\n}",
    "function getParams() {\n    return {\n        prependContent: getValue('#prependContent'),\n        appendContent: getValue('#appendContent'),\n        suppressQuotes: undefined,\n        columnSeparator: undefined,\n    };\n}"
  ],
  "callbackDependencies": {
    "getParams": ["getValue"],
    "onBtnExport": ["getParams", "alert", "gridOptions"],
    "onBtnUpdate": ["gridOptions"]
  },
  "template": "\n\n<div style=\"display: flex; flex-direction: column; height: 100%;\">\n    <div style=\"display: flex;\">\n        <div style=\"margin-left: 10px;\">\n            <div class=\"row\">\n                <label>prependContent = </label>\n                <select id=\"prependContent\">\n                    <option>none</option>\n                    <option value=\"array\">CSVCell[][] (recommended format)</option>\n                    <option value=\"string\">string (legacy format)</option>\n                </select>\n            </div>\n            <div class=\"row\">\n                <label>appendContent = </label>\n                <select id=\"appendContent\">\n                    <option>none</option>\n                    <option value=\"array\">CSVCell[][] (recommended format)</option>\n                    <option value=\"string\">string (legacy format)</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div style=\"margin: 10px 0;\">\n        <button onclick=\"onBtnUpdate()\">Show CSV export content text</button>\n        <button onclick=\"onBtnExport()\">Download CSV export file</button>\n    </div>\n\n\n    <div style=\"flex: 1 1 0px; position: relative;\">\n        <div id=\"gridContainer\">\n            GRID_TEMPLATE_PLACEHOLDER\n        </div>\n        <textarea id=\"csvResult\">Click the Show CSV export content button to view exported CSV here</textarea>\n    </div>\n</div>\n\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 400
  }
}
