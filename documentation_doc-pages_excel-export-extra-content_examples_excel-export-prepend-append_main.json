{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'athlete', minWidth: 200 },\n    { field: 'country', minWidth: 200 },\n    { field: 'sport', minWidth: 150 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    sortable: true,\n    filter: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}"
    },
    { "name": "popupParent", "value": "document.body" }
  ],
  "components": [],
  "defaultColDef": "{\n    sortable: true,\n    filter: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'athlete',\n    minWidth: 200 },\n    {\n        field: 'country',\n    minWidth: 200 },\n    {\n        field: 'sport',\n    minWidth: 150 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtExport",
      "params": "",
      "body": "function onBtExport() {\n    this.gridApi.exportDataAsExcel(getParams());\n}"
    }
  ],
  "utils": [
    "const getRows = () => [\n    [],\n    [\n        {\n            data: { value: 'Here is a comma, and a some \"quotes\".', type: 'String' },\n        },\n    ],\n    [\n        {\n            data: {\n                value: 'They are visible when the downloaded file is opened in Excel because custom content is properly escaped.',\n                type: 'String',\n            },\n        },\n    ],\n    [\n        { data: { value: 'this cell:', type: 'String' }, mergeAcross: 1 },\n        {\n            data: {\n                value: 'is empty because the first cell has mergeAcross=1',\n                type: 'String',\n            },\n        },\n    ],\n    [],\n];",
    "const getBoolean = (inputSelector) => !!(document.querySelector(inputSelector)).checked;",
    "const getParams = () => ({\n    prependContent: getBoolean('#prependContent') ? getRows() : undefined,\n    appendContent: getBoolean('#appendContent') ? getRows() : undefined,\n});"
  ],
  "callbackDependencies": { "onBtExport": ["gridOptions"] },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/small-olympic-winners.json'",
    "callback": "params.api.setRowData(data.filter((rec) => rec.country != null))"
  },
  "template": "<div class=\"container\">\n    <div class=\"columns\">\n        <label class=\"option\" for=\"prependContent\"><input type=\"checkbox\" id=\"prependContent\">Prepend Content</label>\n        <label class=\"option\" for=\"appendContent\"><input type=\"checkbox\" id=\"appendContent\"> Append Content</label>\n    </div>\n    <div>\n        <button onclick=\"onBtExport()\" style=\"margin: 5px 0px; font-weight: bold;\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 815
  }
}
