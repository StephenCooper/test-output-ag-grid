{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Athlete',\n        children: [\n            { field: 'athlete', headerName: 'Name', minWidth: 170 },\n            { field: 'age' },\n            { field: 'country' },\n        ],\n    },\n    { field: 'year' },\n    { field: 'sport' },\n    {\n        headerName: 'Medals',\n        children: [\n            { field: 'gold' },\n            { field: 'silver' },\n            { field: 'bronze' },\n            { field: 'total' },\n        ],\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true,\n}"
    },
    { "name": "navigateToNextHeader", "value": null },
    { "name": "tabToNextHeader", "value": null },
    { "name": "tabToNextCell", "value": null },
    { "name": "navigateToNextCell", "value": null }
  ],
  "components": [],
  "defaultColDef": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Athlete',\n    children: [{\n        field: 'athlete',\n    headerName: 'Name',\n    minWidth: 170 },\n    { field: 'age' },\n    { field: 'country' }] },\n    { field: 'year' },\n    { field: 'sport' },\n    {\n        headerName: 'Medals',\n    children: [{ field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' }] }]",
  "instanceMethods": [
    "function navigateToNextHeader(params) {\n    const nextHeader = params.nextHeaderPosition;\n    let processedNextHeader;\n    if (params.key !== 'ArrowDown' && params.key !== 'ArrowUp') {\n        return nextHeader;\n    }\n    processedNextHeader = moveHeaderFocusUpDown(params.previousHeaderPosition, params.headerRowCount, params.key === 'ArrowDown');\n    return processedNextHeader === nextHeader ? null : processedNextHeader;\n}",
    "function tabToNextHeader(params) {\n    return moveHeaderFocusUpDown(params.previousHeaderPosition, params.headerRowCount, params.backwards);\n}",
    "function tabToNextCell(params) {\n    const previousCell = params.previousCellPosition, lastRowIndex = previousCell.rowIndex;\n    let nextRowIndex = params.backwards ? lastRowIndex - 1 : lastRowIndex + 1;\n    const renderedRowCount = this.gridApi.getModel().getRowCount();\n    let result;\n    if (nextRowIndex < 0) {\n        nextRowIndex = -1;\n    }\n    if (nextRowIndex >= renderedRowCount) {\n        nextRowIndex = renderedRowCount - 1;\n    }\n    result = {\n        rowIndex: nextRowIndex,\n        column: previousCell.column,\n        rowPinned: previousCell.rowPinned,\n    };\n    return result;\n}",
    "function navigateToNextCell(params) {\n    const previousCell = params.previousCellPosition, suggestedNextCell = params.nextCellPosition;\n    let nextRowIndex, renderedRowCount;\n    switch (params.key) {\n        case KEY_DOWN:\n            // return the cell above\n            nextRowIndex = previousCell.rowIndex - 1;\n            if (nextRowIndex < -1) {\n                return null;\n            } // returning null means don't navigate\n            return {\n                rowIndex: nextRowIndex,\n                column: previousCell.column,\n                rowPinned: previousCell.rowPinned,\n            };\n        case KEY_UP:\n            // return the cell below\n            nextRowIndex = previousCell.rowIndex + 1;\n            renderedRowCount = this.gridApi.getModel().getRowCount();\n            if (nextRowIndex >= renderedRowCount) {\n                return null;\n            } // returning null means don't navigate\n            return {\n                rowIndex: nextRowIndex,\n                column: previousCell.column,\n                rowPinned: previousCell.rowPinned,\n            };\n        case KEY_LEFT:\n        case KEY_RIGHT:\n            return suggestedNextCell;\n        default:\n            throw Error('this will never happen, navigation is always one of the 4 keys above');\n    }\n}"
  ],
  "externalEventHandlers": [],
  "utils": [
    "// define some handy keycode constants\nconst KEY_LEFT = 'ArrowLeft';",
    "const KEY_UP = 'ArrowUp';",
    "const KEY_RIGHT = 'ArrowRight';",
    "const KEY_DOWN = 'ArrowDown';",
    "function moveHeaderFocusUpDown(previousHeader, headerRowCount, isUp) {\n    const previousColumn = previousHeader.column, lastRowIndex = previousHeader.headerRowIndex;\n    let nextRowIndex = isUp ? lastRowIndex - 1 : lastRowIndex + 1, nextColumn, parentColumn;\n    if (nextRowIndex === -1) {\n        return previousHeader;\n    }\n    if (nextRowIndex === headerRowCount) {\n        nextRowIndex = -1;\n    }\n    parentColumn = previousColumn.getParent();\n    if (isUp) {\n        nextColumn = parentColumn || previousColumn;\n    }\n    else {\n        nextColumn = (previousColumn).children\n            ? (previousColumn).children[0]\n            : previousColumn;\n    }\n    return {\n        headerRowIndex: nextRowIndex,\n        column: nextColumn,\n    };\n}"
  ],
  "callbackDependencies": {
    "navigateToNextHeader": ["moveHeaderFocusUpDown"],
    "tabToNextHeader": ["moveHeaderFocusUpDown"],
    "tabToNextCell": ["gridOptions"],
    "navigateToNextCell": ["gridOptions"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "params.api.setRowData(data)"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
