{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[{ field: 'product' }, { field: 'value' }]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 250,\n    resizable: true,\n}"
    },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.product;\n}"
    },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "serverSideStoreType", "value": "'full'" },
    { "name": "enableCellChangeFlash", "value": "true" },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "animateRows", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 250,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{ field: 'product' },\n    { field: 'value' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onRemoveSelected",
      "params": "",
      "body": "function onRemoveSelected() {\n    const rowsToRemove = this.gridApi.getSelectedRows();\n    const tx = {\n        remove: rowsToRemove,\n    };\n    this.gridApi.applyServerSideTransaction(tx);\n}"
    },
    {
      "name": "onRemoveRandom",
      "params": "",
      "body": "function onRemoveRandom() {\n    const rowsToRemove = [];\n    let firstRow;\n    this.gridApi.forEachNode(function (node) {\n        if (firstRow == null) {\n            firstRow = node.data;\n        }\n        // skip half the nodes at random\n        if (Math.random() < 0.75) {\n            return;\n        }\n        rowsToRemove.push(node.data);\n    });\n    if (rowsToRemove.length == 0 && firstRow != null) {\n        rowsToRemove.push(firstRow);\n    }\n    const tx = {\n        remove: rowsToRemove,\n    };\n    this.gridApi.applyServerSideTransaction(tx);\n}"
    },
    {
      "name": "onUpdateSelected",
      "params": "",
      "body": "function onUpdateSelected() {\n    const rowsToUpdate = this.gridApi.getSelectedRows();\n    rowsToUpdate.forEach(function (data) {\n        data.value = getNextValue();\n    });\n    const tx = {\n        update: rowsToUpdate,\n    };\n    this.gridApi.applyServerSideTransaction(tx);\n}"
    },
    {
      "name": "onUpdateRandom",
      "params": "",
      "body": "function onUpdateRandom() {\n    const rowsToUpdate = [];\n    this.gridApi.forEachNode(function (node) {\n        // skip half the nodes at random\n        if (Math.random() > 0.5) {\n            return;\n        }\n        const data = node.data;\n        data.value = getNextValue();\n        rowsToUpdate.push(data);\n    });\n    const tx = {\n        update: rowsToUpdate,\n    };\n    this.gridApi.applyServerSideTransaction(tx);\n}"
    },
    {
      "name": "onAdd",
      "params": "",
      "body": "function onAdd(index) {\n    const newProductName = all_products[Math.floor(all_products.length * Math.random())];\n    const itemsToAdd = [];\n    for (let i = 0; i < 5; i++) {\n        itemsToAdd.push({\n            product: newProductName + ' ' + newProductSequence++,\n            value: getNextValue(),\n        });\n    }\n    const tx = {\n        addIndex: index,\n        add: itemsToAdd,\n    };\n    this.gridApi.applyServerSideTransaction(tx);\n}"
    }
  ],
  "utils": [
    "const products = ['Palm Oil', 'Rubber', 'Wool', 'Amber', 'Copper'];",
    "const all_products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n    'Rough Rice',\n    'Soybeans',\n    'Rapeseed',\n    'Soybean Meal',\n    'Soybean Oil',\n    'Wheat',\n    'Milk',\n    'Coca',\n    'Coffee C',\n    'Cotton No.2',\n    'Sugar No.11',\n    'Sugar No.14',\n];",
    "let newProductSequence = 0;",
    "let valueCounter = 0;",
    "function getNextValue() {\n    valueCounter++;\n    return Math.floor((valueCounter * 987654321) / 7) % 10000;\n}"
  ],
  "callbackDependencies": {
    "onRemoveSelected": ["gridOptions"],
    "onRemoveRandom": ["gridOptions"],
    "onUpdateSelected": ["gridOptions"],
    "onUpdateRandom": ["gridOptions"],
    "onAdd": ["all_products", "gridOptions"],
    "getNextValue": ["valueCounter", "Math"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    const dataSource = {\n        getRows: function (params) {\n            // To make the demo look real, wait for 500ms before returning\n            setTimeout(function () {\n                const rows = [];\n                products.forEach(function (product, index) {\n                    rows.push({\n                        product: product,\n                        value: getNextValue(),\n                    });\n                });\n                // call the success callback\n                params.success({ rowData: rows, rowCount: rows.length });\n            }, 500);\n        },\n    };\n    params.api.setServerSideDatasource(dataSource);\n}"
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onAdd()\">Add at End</button>\n        <button onclick=\"onAdd(0)\">Add at Start</button>\n        <button onclick=\"onUpdateSelected()\">Update Selected</button>\n        <button onclick=\"onUpdateRandom()\">Update Random</button>\n        <button onclick=\"onRemoveSelected()\">Remove Selected</button>\n        <button onclick=\"onRemoveRandom()\">Remove Random</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "modules": ["serverside"]
  }
}
