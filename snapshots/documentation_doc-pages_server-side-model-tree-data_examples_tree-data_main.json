{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'employeeId', hide: true },\n    { field: 'employeeName', hide: true },\n    { field: 'jobTitle' },\n    { field: 'employmentType' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 240,\n    filter: 'agTextColumnFilter',\n    flex: 1,\n}"
    },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    field: 'employeeName',\n    cellRendererParams: {\n        innerRenderer: function (params) {\n            // display employeeName rather than group key (employeeId)\n            return params.data.employeeName;\n        },\n    },\n}"
    },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "treeData", "value": "true" },
    { "name": "animateRows", "value": "true" },
    {
      "name": "isServerSideGroupOpenByDefault",
      "value": "function (params) {\n    // open first two levels by default\n    return params.rowNode.level < 2;\n}"
    },
    {
      "name": "isServerSideGroup",
      "value": "function (dataItem) {\n    // indicate if node is a group\n    return dataItem.group;\n}"
    },
    {
      "name": "getServerSideGroupKey",
      "value": "function (dataItem) {\n    // specify which group key to use\n    return dataItem.employeeId;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 240,\n    filter: 'agTextColumnFilter',\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'employeeId',\n    hide: true },\n    {\n        field: 'employeeName',\n    hide: true },\n    { field: 'jobTitle' },\n    { field: 'employmentType' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function createFakeServer(fakeServerData) {\n    const fakeServer = {\n        data: fakeServerData,\n        getData: function (request) {\n            function extractRowsFromData(groupKeys, data) {\n                if (groupKeys.length === 0) {\n                    return data.map(function (d) {\n                        return {\n                            group: !!d.children,\n                            employeeId: d.employeeId,\n                            employeeName: d.employeeName,\n                            employmentType: d.employmentType,\n                            jobTitle: d.jobTitle,\n                        };\n                    });\n                }\n                var key = groupKeys[0];\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i].employeeId === key) {\n                        return extractRowsFromData(groupKeys.slice(1), data[i].children.slice());\n                    }\n                }\n            }\n            return extractRowsFromData(request.groupKeys, this.data);\n        },\n    };\n    return fakeServer;\n}",
    "function createServerSideDatasource(fakeServer) {\n    const dataSource = {\n        getRows: function (params) {\n            console.log('ServerSideDatasource.getRows: params = ', params);\n            var allRows = fakeServer.getData(params.request);\n            var request = params.request;\n            var doingInfinite = request.startRow != null && request.endRow != null;\n            var result = doingInfinite\n                ? {\n                    rowData: allRows.slice(request.startRow, request.endRow),\n                    rowCount: allRows.length,\n                }\n                : { rowData: allRows };\n            console.log('getRows: result = ', result);\n            setTimeout(function () {\n                params.success(result);\n            }, 200);\n        },\n    };\n    return dataSource;\n}"
  ],
  "callbackDependencies": {
    "createFakeServer": ["request", "extractRowsFromData", "groupKeys", "data"],
    "createServerSideDatasource": ["params", "setTimeout"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/small-tree-data.json'",
    "callback": "{\n    var fakeServer = createFakeServer(data);\n    var datasource = createServerSideDatasource(fakeServer);\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "exampleHeight": 590,
    "extras": ["lodash"],
    "modules": ["serverside", "rowgrouping", "menu", "columnpanel"]
  }
}
