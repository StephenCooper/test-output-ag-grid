{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'athlete', colId: 'athlete', minWidth: 180 },\n    { field: 'age', colId: 'age' },\n    { field: 'country', colId: 'country', minWidth: 180 },\n    { field: 'year', colId: 'year' },\n    { field: 'sport', colId: 'sport', minWidth: 180 },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    sortable: true,\n    resizable: true,\n    filter: true,\n}"
    },
    { "name": "rowModelType", "value": "'infinite'" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    sortable: true,\n    resizable: true,\n    filter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'athlete',\n    colId: 'athlete',\n    minWidth: 180 },\n    {\n        field: 'age',\n    colId: 'age' },\n    {\n        field: 'country',\n    colId: 'country',\n    minWidth: 180 },\n    {\n        field: 'year',\n    colId: 'year' },\n    {\n        field: 'sport',\n    colId: 'sport',\n    minWidth: 180 }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtShowYearColumn",
      "params": "",
      "body": "function onBtShowYearColumn() {\n    this.gridApi.setColumnDefs([\n        { field: 'athlete', colId: 'athlete' },\n        { field: 'age', colId: 'age' },\n        { field: 'country', colId: 'country' },\n        { field: 'year', colId: 'year' },\n        { field: 'sport', colId: 'sport' },\n    ]);\n}"
    },
    {
      "name": "onBtHideYearColumn",
      "params": "",
      "body": "function onBtHideYearColumn() {\n    this.gridApi.setColumnDefs([\n        { field: 'athlete', colId: 'athlete' },\n        { field: 'age', colId: 'age' },\n        { field: 'country', colId: 'country' },\n        { field: 'sport', colId: 'sport' },\n    ]);\n}"
    }
  ],
  "utils": [
    "function sortAndFilter(allOfTheData, sortModel, filterModel) {\n    return sortData(sortModel, filterData(filterModel, allOfTheData));\n}",
    "function sortData(sortModel, data) {\n    var sortPresent = sortModel && sortModel.length > 0;\n    if (!sortPresent) {\n        return data;\n    }\n    // do an in memory sort of the data, across all the fields\n    var resultOfSort = data.slice();\n    resultOfSort.sort(function (a, b) {\n        for (var k = 0; k < sortModel.length; k++) {\n            var sortColModel = sortModel[k];\n            var valueA = a[sortColModel.colId];\n            var valueB = b[sortColModel.colId];\n            // this filter didn't find a difference, move onto the next one\n            if (valueA == valueB) {\n                continue;\n            }\n            var sortDirection = sortColModel.sort === 'asc' ? 1 : -1;\n            if (valueA > valueB) {\n                return sortDirection;\n            }\n            else {\n                return sortDirection * -1;\n            }\n        }\n        // no filters found a difference\n        return 0;\n    });\n    return resultOfSort;\n}",
    "function filterData(filterModel, data) {\n    var filterPresent = filterModel && Object.keys(filterModel).length > 0;\n    if (!filterPresent) {\n        return data;\n    }\n    var resultOfFilter = [];\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        var filterFails = false;\n        var filterKeys = Object.keys(filterModel);\n        filterKeys.forEach(function (filterKey) {\n            var filterValue = filterModel[filterKey].filter;\n            var valueForRow = item[filterKey];\n            if (filterValue != valueForRow) {\n                // year didn't match, so skip this record\n                filterFails = true;\n            }\n        });\n        // if (filterModel.year) {\n        //     var val1 = filterModel.year.filter;\n        //     var val2 = item.year;\n        //     if (val1 != val2) {\n        //         // year didn't match, so skip this record\n        //         continue;\n        //     }\n        // }\n        //\n        if (!filterFails) {\n            resultOfFilter.push(item);\n        }\n    }\n    return resultOfFilter;\n}"
  ],
  "callbackDependencies": {
    "onBtShowYearColumn": ["gridOptions"],
    "onBtHideYearColumn": ["gridOptions"],
    "sortAndFilter": ["sortData"],
    "filterData": ["Object"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // give each row an id\n    data.forEach(function (d, index) {\n        d.id = 'R' + (index + 1);\n    });\n    var dataSource = {\n        rowCount: undefined,\n        getRows: function (params) {\n            console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n            // At this point in your code, you would call the server, using $http if in AngularJS 1.x.\n            // To make the demo look real, wait for 500ms before returning\n            setTimeout(function () {\n                // take a slice of the total rows\n                var dataAfterSortingAndFiltering = sortAndFilter(data, params.sortModel, params.filterModel);\n                var rowsThisPage = dataAfterSortingAndFiltering.slice(params.startRow, params.endRow);\n                // if on or after the last page, work out the last row.\n                var lastRow = -1;\n                if (dataAfterSortingAndFiltering.length <= params.endRow) {\n                    lastRow = dataAfterSortingAndFiltering.length;\n                }\n                // call the success callback\n                params.successCallback(rowsThisPage, lastRow);\n            }, 500);\n        },\n    };\n    params.api.setDatasource(dataSource);\n}"
  },
  "template": "<div class=\"test-container\">\n\n    <div class=\"test-header\">\n        <button onclick=\"onBtShowYearColumn()\">Show Year</button>\n        <button onclick=\"onBtHideYearColumn()\">Hide Year</button>\n    </div>\n\n    GRID_TEMPLATE_PLACEHOLDER\n\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "modules": ["infinite"]
  }
}
