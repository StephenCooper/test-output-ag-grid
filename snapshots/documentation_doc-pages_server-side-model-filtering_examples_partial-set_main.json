{
  "eventHandlers": [
    {
      "name": "filterChanged",
      "handlerName": "onFilterChanged",
      "handler": "function onFilterChanged() {\n    var countryFilterModel = this.gridApi.getFilterModel()['country'];\n    var selected = countryFilterModel && countryFilterModel.values;\n    if (!areEqual(selectedCountries, selected)) {\n        selectedCountries = selected;\n        console.log('Refreshing sports filter');\n        var sportFilter = this.gridApi.getFilterInstance('sport');\n        sportFilter.refreshFilterValues();\n    }\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        field: 'country',\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            values: getCountryValuesAsync,\n        },\n        menuTabs: ['filterMenuTab'],\n    },\n    {\n        field: 'sport',\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            values: getSportValuesAsync,\n        },\n        menuTabs: ['filterMenuTab'],\n    },\n    { field: 'athlete', menuTabs: undefined },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    resizable: true,\n}"
    },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "cacheBlockSize", "value": "100" },
    { "name": "maxBlocksInCache", "value": "10" },
    { "name": "animateRows", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'country',\n    filter: 'agSetColumnFilter',\n    filterParams : { values: 'AG_LITERAL_getCountryValuesAsync' },\n    menuTabs: ['filterMenuTab'] },\n    {\n        field: 'sport',\n    filter: 'agSetColumnFilter',\n    filterParams : { values: 'AG_LITERAL_getSportValuesAsync' },\n    menuTabs: ['filterMenuTab'] },\n    {\n        field: 'athlete',\n    menuTabs: 'AG_LITERAL_undefined' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "var fakeServer;",
    "var selectedCountries = null;",
    "function areEqual(a, b) {\n    if (a == null && b == null) {\n        return true;\n    }\n    if (a != null || b != null) {\n        return false;\n    }\n    return (a.length === b.length &&\n        a.every(function (v, i) {\n            return b[i] === v;\n        }));\n}",
    "function getCountryValuesAsync(params) {\n    var countries = fakeServer.getCountries();\n    // simulating real server call with a 500ms delay\n    setTimeout(function () {\n        params.success(countries);\n    }, 500);\n}",
    "function getSportValuesAsync(params) {\n    var sports = fakeServer.getSports(selectedCountries);\n    // simulating real server call with a 500ms delay\n    setTimeout(function () {\n        params.success(sports);\n    }, 500);\n}",
    "function getServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            // get data for request from our fake server\n            var response = server.getData(params.request);\n            // simulating real server call with a 500ms delay\n            setTimeout(function () {\n                if (response.success) {\n                    // supply rows for requested block to grid\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                }\n                else {\n                    params.fail();\n                }\n            }, 500);\n        },\n    };\n}"
  ],
  "callbackDependencies": {
    "onFilterChanged": ["gridOptions", "areEqual", "selectedCountries"],
    "getCountryValuesAsync": ["fakeServer", "setTimeout"],
    "getSportValuesAsync": ["fakeServer", "setTimeout"],
    "getServerSideDatasource": ["params", "setTimeout"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // setup the fake server with entire dataset\n    fakeServer = new FakeServer(data);\n    // create datasource with a reference to the fake server\n    var datasource = getServerSideDatasource(fakeServer);\n    // register the datasource with the grid\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "extras": ["alasql"],
    "modules": ["serverside", "setfilter", "menu"]
  }
}
