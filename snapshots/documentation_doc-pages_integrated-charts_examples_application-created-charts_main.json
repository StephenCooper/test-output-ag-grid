{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'product', chartDataType: 'category' },\n    { field: 'book', chartDataType: 'category' },\n    { field: 'current', type: 'measure' },\n    { field: 'previous', type: 'measure' },\n    { headerName: 'PL 1', field: 'pl1', type: 'measure' },\n    { headerName: 'PL 2', field: 'pl2', type: 'measure' },\n    { headerName: 'Gain-DX', field: 'gainDx', type: 'measure' },\n    { headerName: 'SX / PX', field: 'sxPx', type: 'measure' },\n    { field: 'trade', type: 'measure' },\n    { field: 'submitterID', type: 'measure' },\n    { field: 'submitterDealID', type: 'measure', minWidth: 170 },\n    { field: 'portfolio' },\n    { field: 'dealType' },\n    { headerName: 'Bid', field: 'bidFlag' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n    resizable: true,\n}"
    },
    {
      "name": "columnTypes",
      "value": "{\n    measure: {\n        chartDataType: 'series',\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n}"
    },
    { "name": "animateRows", "value": "true" },
    { "name": "enableCharts", "value": "true" },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.trade;\n}"
    },
    { "name": "chartThemes", "value": "['ag-pastel-dark']" },
    {
      "name": "chartThemeOverrides",
      "value": "{\n    common: {\n        legend: {\n            position: 'bottom',\n        },\n    },\n    column: {\n        axes: {\n            number: {\n                label: {\n                    formatter: yAxisLabelFormatter,\n                },\n            },\n            category: {\n                label: {\n                    rotation: 0,\n                },\n            },\n        },\n        series: {\n            tooltip: {\n                renderer: tooltipRenderer,\n            },\n        },\n    },\n    line: {\n        series: {\n            tooltip: {\n                renderer: tooltipRenderer,\n            },\n        },\n    },\n}"
    },
    {
      "name": "getChartToolbarItems",
      "value": "function () {\n    return []; // hide toolbar items\n}"
    }
  ],
  "components": [],
  "defaultColDef": null,
  "globalComponents": [],
  "parsedColDefs": "",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "createChart",
      "params": "'stackedColumn'",
      "body": "function createChart(type) {\n    // destroy existing chart\n    if (chartRef) {\n        chartRef.destroyChart();\n    }\n    var params = {\n        cellRange: {\n            columns: [\n                'product',\n                'current',\n                'previous',\n                'pl1',\n                'pl2',\n                'gainDx',\n                'sxPx',\n            ]\n        },\n        chartContainer: document.querySelector('#myChart'),\n        chartType: type,\n        suppressChartRanges: true,\n        aggFunc: 'sum',\n    };\n    chartRef = this.gridApi.createRangeChart(params);\n}"
    },
    {
      "name": "onStartLoad",
      "params": "",
      "body": "function onStartLoad() {\n    worker.postMessage('start');\n}"
    },
    {
      "name": "onStopMessages",
      "params": "",
      "body": "function onStopMessages() {\n    worker.postMessage('stop');\n}"
    }
  ],
  "utils": [
    "var chartRef;",
    "function numberCellFormatter(params) {\n    return Math.floor(params.value)\n        .toString()\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
    "function yAxisLabelFormatter(params) {\n    var n = params.value;\n    if (n < 1e3)\n        return n;\n    if (n >= 1e3 && n < 1e6)\n        return +(n / 1e3).toFixed(1) + 'K';\n    if (n >= 1e6 && n < 1e9)\n        return +(n / 1e6).toFixed(1) + 'M';\n    if (n >= 1e9 && n < 1e12)\n        return +(n / 1e9).toFixed(1) + 'B';\n    if (n >= 1e12)\n        return +(n / 1e12).toFixed(1) + 'T';\n}",
    "function tooltipRenderer(params) {\n    var value = '$' +\n        params.datum[params.yKey]\n            .toString()\n            .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    var title = params.title || params.yName;\n    return '<div style=\"padding: 5px\"><b>' + title + '</b>: ' + value + '</div>';\n}",
    "var worker;"
  ],
  "callbackDependencies": {
    "createChart": ["chartRef", "gridOptions"],
    "numberCellFormatter": ["Math"],
    "yAxisLabelFormatter": ["n / 1e3", "n / 1e6", "n / 1e9", "n / 1e12"],
    "onStartLoad": ["worker"],
    "onStopMessages": ["worker"]
  },
  "template": "<div id=\"myApp\" class=\"wrapper\">\n    <div style=\"padding-bottom: 4px\">\n        <span>\n            <button onclick=\"onStopMessages()\">■ Stop</button>\n            <button onclick=\"onStartLoad()\">► Start</button>\n        </span>\n        <span style=\"margin-left: 30px;\">\n            <button onclick=\"createChart('stackedColumn')\">Stacked Column Chart</button>\n            <button onclick=\"createChart('groupedColumn')\">Grouped Column Chart</button>\n            <button onclick=\"createChart('line')\">Line Chart</button>\n        </span>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n    <div id=\"myChart\" class=\"ag-theme-balham-dark my-chart\"></div>\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-balham-dark",
    "exampleHeight": 825,
    "enterprise": true
  }
}
