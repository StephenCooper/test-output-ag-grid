{
  "eventHandlers": [
    {
      "name": "asyncTransactionsFlushed",
      "handlerName": "onAsyncTransactionsFlushed",
      "handler": "function onAsyncTransactionsFlushed(e) {\n    var summary = {};\n    (e.results).forEach((result) => {\n        var status = result.status;\n        if (summary[status] == null) {\n            summary[status] = 0;\n        }\n        summary[status]++;\n    });\n    console.log('onAsyncTransactionsFlushed: ' + JSON.stringify(summary));\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // keys\n    { field: 'productName', rowGroup: true, hide: true },\n    { field: 'portfolioName', rowGroup: true, hide: true },\n    { field: 'bookId', rowGroup: true, hide: true },\n    // {field: 'productId'},\n    // {field: 'portfolioId'},\n    // {field: 'bookId'},\n    // all the other columns (visible and not grouped)\n    {\n        headerName: 'Current',\n        field: 'current',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Previous',\n        field: 'previous',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Deal Type',\n        field: 'dealType',\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            values: ['Financial', 'Physical'],\n        },\n    },\n    {\n        headerName: 'Bid',\n        field: 'bidFlag',\n        width: 100,\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            values: ['Buy', 'Sell'],\n        },\n    },\n    {\n        headerName: 'PL 1',\n        field: 'pl1',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'PL 2',\n        field: 'pl2',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Gain-DX',\n        field: 'gainDx',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'SX / PX',\n        field: 'sxPx',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: '99 Out',\n        field: '_99Out',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Submitter ID',\n        field: 'submitterID',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Submitted Deal ID',\n        field: 'submitterDealID',\n        width: 200,\n        type: 'numericColumn',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n]"
    },
    { "name": "asyncTransactionWaitMillis", "value": "500" },
    { "name": "purgeClosedRowNodes", "value": "true" },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "serverSideStoreType", "value": "'full'" },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "animateRows", "value": "true" },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 250,\n    resizable: true,\n    sortable: true,\n}"
    },
    { "name": "autoGroupColumnDef", "value": "{\n    field: 'tradeId',\n}" },
    { "name": "getRowNodeId", "value": null },
    { "name": "isApplyServerSideTransaction", "value": null }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 250,\n    resizable: true,\n    sortable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'productName',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'portfolioName',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'bookId',\n    rowGroup: true,\n    hide: true },\n    {\n        headerName: 'Current',\n    field: 'current',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Previous',\n    field: 'previous',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Deal Type',\n    field: 'dealType',\n    filter: 'agSetColumnFilter',\n    filterParams : { values: ['Financial', 'Physical'] } },\n    {\n        headerName: 'Bid',\n    field: 'bidFlag',\n    width: 100,\n    filter: 'agSetColumnFilter',\n    filterParams : { values: ['Buy', 'Sell'] } },\n    {\n        headerName: 'PL 1',\n    field: 'pl1',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'PL 2',\n    field: 'pl2',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Gain-DX',\n    field: 'gainDx',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'SX / PX',\n    field: 'sxPx',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: '99 Out',\n    field: '_99Out',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Submitter ID',\n    field: 'submitterID',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Submitted Deal ID',\n    field: 'submitterDealID',\n    width: 200,\n    type: 'numericColumn',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' }]",
  "instanceMethods": [
    "function getRowNodeId(data) {\n    if (data.tradeId) {\n        return data.tradeId;\n    }\n    else if (data.bookId) {\n        return data.bookId;\n    }\n    else if (data.portfolioId) {\n        return data.portfolioId;\n    }\n    else if (data.productId) {\n        return data.productId;\n    }\n}",
    "function isApplyServerSideTransaction(params) {\n    var transactionVersion = (params.transaction).serverVersion;\n    var dataLoadedVersion = params.storeInfo.serverVersion;\n    var transactionCreatedSinceInitialLoad = transactionVersion > dataLoadedVersion;\n    if (!transactionCreatedSinceInitialLoad) {\n        console.log('cancelling transaction');\n    }\n    return transactionCreatedSinceInitialLoad;\n}"
  ],
  "externalEventHandlers": [
    {
      "name": "onBtStart",
      "params": "",
      "body": "function onBtStart() {\n    fakeServer.startUpdates();\n}"
    },
    {
      "name": "onBtStop",
      "params": "",
      "body": "function onBtStop() {\n    fakeServer.stopUpdates();\n}"
    },
    {
      "name": "onBtApplyOneTransaction",
      "params": "",
      "body": "function onBtApplyOneTransaction() {\n    fakeServer.insertOneRecord();\n}"
    }
  ],
  "utils": [
    "var fakeServer = new FakeServer();",
    "function numberCellFormatter(params) {\n    return Math.floor(params.value)\n        .toString()\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
    "function processUpdateFromFakeServer(gridApi, transactions) {\n    var updatingJustOneTransaction = transactions.length == 4;\n    if (updatingJustOneTransaction) {\n        console.log('Updating One Record');\n    }\n    transactions.forEach(function (tx) {\n        gridApi.applyServerSideTransactionAsync(tx, function (res) {\n            if (updatingJustOneTransaction) {\n                console.log('Route [' + (tx.route || []).join(',') + '], status = ' + res.status);\n            }\n        });\n    });\n}"
  ],
  "callbackDependencies": {
    "numberCellFormatter": ["Math"],
    "onBtStart": ["fakeServer"],
    "onBtStop": ["fakeServer"],
    "onBtApplyOneTransaction": ["fakeServer"]
  },
  "onGridReady": "{\n    var dataSource = {\n        getRows: function (params2) {\n            fakeServer.getData(params2.request, params2.parentNode.data, function (result, serverVersion) {\n                params2.success({\n                    rowData: result,\n                    storeInfo: { serverVersion: serverVersion },\n                });\n            });\n        },\n    };\n    params.api.setServerSideDatasource(dataSource);\n    var callback = processUpdateFromFakeServer.bind(window, params.api);\n    fakeServer.addUpdateListener(callback);\n}",
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onBtApplyOneTransaction()\">One Transaction</button>\n        <button onclick=\"onBtStart()\">Start Feed</button>\n        <button onclick=\"onBtStop()\">Stop Feed</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "modules": ["serverside", "rowgrouping"]
  }
}
