{
  "eventHandlers": [
    {
      "name": "columnPinned",
      "handlerName": "onColumnPinned",
      "handler": "function onColumnPinned(event) {\n    const allCols = event.columnApi.getAllGridColumns();\n    const allFixedCols = allCols.filter(col => col.getColDef().lockPosition);\n    const allNonFixedCols = allCols.filter(col => !col.getColDef().lockPosition);\n    const pinnedCount = allNonFixedCols.filter(col => col.getPinned() === 'left')\n        .length;\n    const pinFixed = pinnedCount > 0;\n    const columnStates = [];\n    allFixedCols.forEach(col => {\n        if (pinFixed !== col.isPinned()) {\n            columnStates.push({\n                colId: col.getId(),\n                pinned: pinFixed ? 'left' : null,\n            });\n        }\n    });\n    if (columnStates.length > 0) {\n        event.columnApi.applyColumnState({ state: columnStates });\n    }\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        lockPosition: true,\n        valueGetter: 'node.rowIndex',\n        cellClass: 'locked-col',\n        width: 60,\n        suppressNavigable: true,\n    },\n    {\n        lockPosition: true,\n        cellRenderer: controlsCellRenderer,\n        cellClass: 'locked-col',\n        width: 120,\n        suppressNavigable: true,\n    },\n    { field: 'athlete' },\n    { field: 'age' },\n    { field: 'country' },\n    { field: 'year' },\n    { field: 'date' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 150,\n    resizable: true,\n}"
    },
    { "name": "suppressDragLeaveHidesColumns", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 150,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        lockPosition: true,\n    valueGetter: 'node.rowIndex',\n    cellClass: 'locked-col',\n    width: 60,\n    suppressNavigable: true },\n    {\n        lockPosition: true,\n    cellRenderer: 'AG_LITERAL_controlsCellRenderer',\n    cellClass: 'locked-col',\n    width: 120,\n    suppressNavigable: true },\n    { field: 'athlete' },\n    { field: 'age' },\n    { field: 'country' },\n    { field: 'year' },\n    { field: 'date' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onPinAthlete",
      "params": "",
      "body": "function onPinAthlete() {\n    this.gridColumnApi.applyColumnState({\n        state: [{ colId: 'athlete', pinned: 'left' }],\n    });\n}"
    },
    {
      "name": "onUnpinAthlete",
      "params": "",
      "body": "function onUnpinAthlete() {\n    this.gridColumnApi.applyColumnState({\n        state: [{ colId: 'athlete', pinned: null }],\n    });\n}"
    }
  ],
  "utils": [
    "// simple cell renderer returns dummy buttons. in a real application, a component would probably\n// be used with operations tied to the buttons. in this example, the cell renderer is just for\n// display purposes.\nfunction controlsCellRenderer() {\n    return '<button>A</button><button>B</button><button>C</button>';\n}"
  ],
  "callbackDependencies": {
    "onPinAthlete": ["gridOptions"],
    "onUnpinAthlete": ["gridOptions"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "params.api.setRowData(data)"
  },
  "template": "<div class=\"example-wrapper\">\n    <div class=\"legend-bar\">\n        <button onclick=\"onPinAthlete()\">Pin Athlete</button>\n        <button onclick=\"onUnpinAthlete()\">Un-Pin Athlete</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <span class=\"locked-col legend-box\"></span> Position Locked Column\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
