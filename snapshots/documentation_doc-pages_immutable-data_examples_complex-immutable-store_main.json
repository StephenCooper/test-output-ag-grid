{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // these are the row groups, so they are all hidden (they are showd in the group column)\n    {\n        field: 'product',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 0,\n        hide: true,\n    },\n    {\n        field: 'portfolio',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 1,\n        hide: true,\n    },\n    {\n        field: 'book',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 2,\n        hide: true,\n    },\n    { field: 'trade', width: 100 },\n    // all the other columns (visible and not grouped)\n    {\n        field: 'batch',\n        width: 100,\n        cellClass: 'number',\n        aggFunc: 'max',\n        enableValue: true,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'current',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'previous',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Change',\n        valueGetter: changeValueGetter,\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'PL 1',\n        field: 'pl1',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'PL 2',\n        field: 'pl2',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Gain-DX',\n        field: 'gainDx',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'SX / PX',\n        field: 'sxPx',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: '99 Out',\n        field: '_99Out',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Submitter ID',\n        field: 'submitterID',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Submitted Deal ID',\n        field: 'submitterDealID',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    // some string values, that do not get aggregated\n    { field: 'dealType', enableRowGroup: true, enablePivot: true },\n    {\n        headerName: 'Bid',\n        field: 'bidFlag',\n        enableRowGroup: true,\n        enablePivot: true,\n        width: 100,\n    },\n    { field: 'comment', editable: true },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 120,\n    sortable: true,\n    resizable: true,\n}"
    },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    width: 250,\n    cellRendererParams: {\n        checkbox: true,\n    },\n}"
    },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "groupSelectsChildren", "value": "true" },
    { "name": "immutableData", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.trade;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 120,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'product',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 0,\n    hide: true },\n    {\n        field: 'portfolio',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 1,\n    hide: true },\n    {\n        field: 'book',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 2,\n    hide: true },\n    {\n        field: 'trade',\n    width: 100 },\n    {\n        field: 'batch',\n    width: 100,\n    cellClass: 'number',\n    aggFunc: 'max',\n    enableValue: true,\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'current',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'previous',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Change',\n    valueGetter: 'AG_LITERAL_changeValueGetter',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'PL 1',\n    field: 'pl1',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'PL 2',\n    field: 'pl2',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Gain-DX',\n    field: 'gainDx',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'SX / PX',\n    field: 'sxPx',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: '99 Out',\n    field: '_99Out',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Submitter ID',\n    field: 'submitterID',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Submitted Deal ID',\n    field: 'submitterDealID',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'dealType',\n    enableRowGroup: true,\n    enablePivot: true },\n    {\n        headerName: 'Bid',\n    field: 'bidFlag',\n    enableRowGroup: true,\n    enablePivot: true,\n    width: 100 },\n    {\n        field: 'comment',\n    editable: true }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "updateData",
      "params": "",
      "body": "function updateData() {\n    removeSomeItems();\n    addSomeItems();\n    updateSomeItems();\n    this.gridApi.setRowData(globalRowData);\n}"
    }
  ],
  "utils": [
    "var MIN_BOOK_COUNT = 10;",
    "var MAX_BOOK_COUNT = 20;",
    "var MIN_TRADE_COUNT = 1;",
    "var MAX_TRADE_COUNT = 10;",
    "var products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n    'Rough Rice',\n    'Soybeans',\n    'Rapeseed',\n    'Soybean Meal',\n    'Soybean Oil',\n    'Wheat',\n    'Milk',\n    'Coca',\n    'Coffee C',\n    'Cotton No.2',\n    'Sugar No.11',\n    'Sugar No.14',\n];",
    "var portfolios = ['Aggressive', 'Defensive', 'Income', 'Speculative', 'Hybrid'];",
    "// as we create books, we remember what products they belong to, so we can\n// add to these books later when use clicks one of the buttons\nvar productToPortfolioToBooks = {};",
    "// start the book id's and trade id's at some future random number,\n// looks more realistic than starting them at 0\nvar nextBookId = 62472;",
    "var nextTradeId = 24287;",
    "var nextBatchId = 101;",
    "// simple value getter, however we can see how many times it gets called. this\n// gives us an indication to how many rows get recalculated when data changes\nfunction changeValueGetter(params) {\n    return params.data.previous - params.data.current;\n}",
    "// a list of the data, that we modify as we go. if you are using an immutable\n// data store (such as Redux) then this would be similar to your store of data.\nvar globalRowData = [];",
    "// build up the test data\nfunction createRowData() {\n    globalRowData = [];\n    var thisBatch = nextBatchId++;\n    for (var i = 0; i < products.length; i++) {\n        var product = products[i];\n        productToPortfolioToBooks[product] = {};\n        for (var j = 0; j < portfolios.length; j++) {\n            var portfolio = portfolios[j];\n            productToPortfolioToBooks[product][portfolio] = [];\n            var bookCount = randomBetween(MAX_BOOK_COUNT, MIN_BOOK_COUNT);\n            for (var k = 0; k < bookCount; k++) {\n                var book = createBookName();\n                productToPortfolioToBooks[product][portfolio].push(book);\n                var tradeCount = randomBetween(MAX_TRADE_COUNT, MIN_TRADE_COUNT);\n                for (var l = 0; l < tradeCount; l++) {\n                    var trade = createTradeRecord(product, portfolio, book, thisBatch);\n                    globalRowData.push(trade);\n                }\n            }\n        }\n    }\n}",
    "// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction randomBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}",
    "function createTradeRecord(product, portfolio, book, batch) {\n    var current = Math.floor(Math.random() * 100000) + 100;\n    var previous = current + Math.floor(Math.random() * 10000) - 2000;\n    var trade = {\n        product: product,\n        portfolio: portfolio,\n        book: book,\n        trade: createTradeId(),\n        submitterID: randomBetween(10, 1000),\n        submitterDealID: randomBetween(10, 1000),\n        dealType: Math.random() < 0.2 ? 'Physical' : 'Financial',\n        bidFlag: Math.random() < 0.5 ? 'Buy' : 'Sell',\n        current: current,\n        previous: previous,\n        pl1: randomBetween(100, 1000),\n        pl2: randomBetween(100, 1000),\n        gainDx: randomBetween(100, 1000),\n        sxPx: randomBetween(100, 1000),\n        _99Out: randomBetween(100, 1000),\n        batch: batch,\n    };\n    return trade;\n}",
    "function numberCellFormatter(params) {\n    return Math.floor(params.value)\n        .toString()\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
    "function createBookName() {\n    nextBookId++;\n    return 'GL-' + nextBookId;\n}",
    "function createTradeId() {\n    nextTradeId++;\n    return nextTradeId;\n}",
    "function updateSomeItems() {\n    var updateCount = randomBetween(1, 6);\n    var itemsToUpdate = [];\n    for (var k = 0; k < updateCount; k++) {\n        if (globalRowData.length === 0) {\n            continue;\n        }\n        var indexToUpdate = Math.floor(Math.random() * globalRowData.length);\n        var itemToUpdate = globalRowData[indexToUpdate];\n        // make a copy of the item, and make some changes, so we are behaving\n        // similar to how the\n        var updatedItem = updateImmutableObject(itemToUpdate, {\n            previous: itemToUpdate.current,\n            current: itemToUpdate.current + randomBetween(0, 1000) - 500,\n        });\n        globalRowData[indexToUpdate] = updatedItem;\n        itemsToUpdate.push(updatedItem);\n    }\n    return itemsToUpdate;\n}",
    "function addSomeItems() {\n    var addCount = randomBetween(1, 6);\n    var itemsToAdd = [];\n    var batch = nextBatchId++;\n    for (var j = 0; j < addCount; j++) {\n        var portfolio = portfolios[Math.floor(Math.random() * portfolios.length)];\n        var books = productToPortfolioToBooks['Palm Oil'][portfolio];\n        var book = books[Math.floor(Math.random() * books.length)];\n        var product = products[Math.floor(Math.random() * products.length)];\n        var trade = createTradeRecord(product, portfolio, book, batch);\n        itemsToAdd.push(trade);\n        globalRowData.push(trade);\n    }\n    return itemsToAdd;\n}",
    "function removeSomeItems() {\n    var removeCount = randomBetween(1, 6);\n    var itemsToRemove = [];\n    for (var i = 0; i < removeCount; i++) {\n        if (globalRowData.length === 0) {\n            continue;\n        }\n        var indexToRemove = randomBetween(0, globalRowData.length);\n        var itemToRemove = globalRowData[indexToRemove];\n        globalRowData.splice(indexToRemove, 1);\n        itemsToRemove.push(itemToRemove);\n    }\n    return itemsToRemove;\n}",
    "// makes a copy of the original and merges in the new values\nfunction updateImmutableObject(original, newValues) {\n    // start with new object\n    var newObject = {};\n    // copy in the old values\n    Object.keys(original).forEach(function (key) {\n        newObject[key] = original[key];\n    });\n    // now override with the new values\n    Object.keys(newValues).forEach(function (key) {\n        newObject[key] = newValues[key];\n    });\n    return newObject;\n}"
  ],
  "callbackDependencies": {
    "createRowData": [
      "globalRowData",
      "nextBatchId",
      "products",
      "productToPortfolioToBooks",
      "portfolios",
      "randomBetween",
      "createBookName",
      "createTradeRecord"
    ],
    "randomBetween": ["Math"],
    "createTradeRecord": ["Math", "createTradeId", "randomBetween"],
    "numberCellFormatter": ["Math"],
    "createBookName": ["nextBookId"],
    "createTradeId": ["nextTradeId"],
    "updateData": [
      "removeSomeItems",
      "addSomeItems",
      "updateSomeItems",
      "gridOptions"
    ],
    "updateSomeItems": [
      "randomBetween",
      "globalRowData",
      "Math",
      "updateImmutableObject"
    ],
    "addSomeItems": [
      "randomBetween",
      "nextBatchId",
      "portfolios",
      "productToPortfolioToBooks",
      "products",
      "createTradeRecord",
      "globalRowData"
    ],
    "removeSomeItems": ["randomBetween", "globalRowData"],
    "updateImmutableObject": ["Object"]
  },
  "onGridReady": "{\n    createRowData();\n    params.api.setRowData(globalRowData);\n}",
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"updateData()\">Update</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 590,
    "modules": ["clientside", "rowgrouping"]
  }
}
