{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Editable A',\n        field: 'a',\n        editable: true,\n        valueParser: numberValueParser,\n    },\n    {\n        headerName: 'Editable B',\n        field: 'b',\n        editable: true,\n        valueParser: numberValueParser,\n    },\n    {\n        headerName: 'Editable C',\n        field: 'c',\n        editable: true,\n        valueParser: numberValueParser,\n    },\n    {\n        headerName: 'API D',\n        field: 'd',\n        minWidth: 140,\n        valueParser: numberValueParser,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'API E',\n        field: 'e',\n        minWidth: 140,\n        valueParser: numberValueParser,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Total',\n        minWidth: 140,\n        valueGetter: 'data.a + data.b + data.c + data.d + data.e',\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Average',\n        minWidth: 140,\n        valueGetter: '(data.a + data.b + data.c + data.d + data.e) / 5',\n        cellRenderer: 'agAnimateSlideCellRenderer',\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 120,\n    resizable: true,\n    cellClass: 'align-right',\n    valueFormatter: function (params) {\n        return formatNumber(params.value);\n    },\n}"
    },
    { "name": "rowData", "value": "createRowData()" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 120,\n    resizable: true,\n    cellClass: 'align-right',\n    valueFormatter: function (params) {\n        return formatNumber(params.value);\n    },\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Editable A',\n    field: 'a',\n    editable: true,\n    valueParser: 'AG_LITERAL_numberValueParser' },\n    {\n        headerName: 'Editable B',\n    field: 'b',\n    editable: true,\n    valueParser: 'AG_LITERAL_numberValueParser' },\n    {\n        headerName: 'Editable C',\n    field: 'c',\n    editable: true,\n    valueParser: 'AG_LITERAL_numberValueParser' },\n    {\n        headerName: 'API D',\n    field: 'd',\n    minWidth: 140,\n    valueParser: 'AG_LITERAL_numberValueParser',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'API E',\n    field: 'e',\n    minWidth: 140,\n    valueParser: 'AG_LITERAL_numberValueParser',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Total',\n    minWidth: 140,\n    valueGetter: 'data.a + data.b + data.c + data.d + data.e',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Average',\n    minWidth: 140,\n    valueGetter: '(data.a + data.b + data.c + data.d + data.e) / 5',\n    cellRenderer: 'agAnimateSlideCellRenderer' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onUpdateSomeValues",
      "params": "",
      "body": "function onUpdateSomeValues() {\n    const rowCount = this.gridApi.getDisplayedRowCount();\n    for (let i = 0; i < 10; i++) {\n        const row = Math.floor(Math.random() * rowCount);\n        const rowNode = this.gridApi.getDisplayedRowAtIndex(row);\n        rowNode.setDataValue('d', Math.floor(Math.random() * 10000));\n        rowNode.setDataValue('e', Math.floor(Math.random() * 10000));\n    }\n}"
    }
  ],
  "utils": [
    "function numberValueParser(params) {\n    return Number(params.newValue);\n}",
    "function formatNumber(number) {\n    // this puts commas into the number eg 1000 goes to 1,000,\n    // i pulled this from stack overflow, i have no idea how it works\n    return Math.floor(number)\n        .toString()\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
    "function createRowData() {\n    const rowData = [];\n    for (let i = 0; i < 20; i++) {\n        rowData.push({\n            a: Math.floor(((i + 323) * 25435) % 10000),\n            b: Math.floor(((i + 323) * 23221) % 10000),\n            c: Math.floor(((i + 323) * 468276) % 10000),\n            d: 0,\n            e: 0,\n        });\n    }\n    return rowData;\n}"
  ],
  "callbackDependencies": {
    "numberValueParser": ["Number"],
    "formatNumber": ["Math"],
    "onUpdateSomeValues": ["gridOptions", "Math"]
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onUpdateSomeValues()\">Update Some D &amp; E Values</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "exampleHeight": 530
  }
}
