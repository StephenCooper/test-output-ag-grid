{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'athlete', filter: true, filterParams: defaultFilterParams },\n    {\n        field: 'age',\n        filter: 'agNumberColumnFilter',\n        filterParams: defaultFilterParams,\n    },\n    {\n        field: 'country',\n        filter: 'agSetColumnFilter',\n        filterParams: defaultFilterParams,\n    },\n    {\n        field: 'year',\n        maxWidth: 120,\n        filter: 'agNumberColumnFilter',\n        filterParams: defaultFilterParams,\n    },\n    {\n        field: 'date',\n        minWidth: 215,\n        filter: 'agDateColumnFilter',\n        filterParams: {\n            readOnly: true,\n            comparator: dateComparator,\n        },\n        suppressMenu: true,\n    },\n    {\n        field: 'sport',\n        suppressMenu: true,\n        filter: 'agMultiColumnFilter',\n        filterParams: {\n            filters: [\n                { filter: 'agTextColumnFilter', filterParams: { readOnly: true } },\n                { filter: 'agSetColumnFilter', filterParams: { readOnly: true } },\n            ],\n            readOnly: true,\n        },\n    },\n    { field: 'gold', filterParams: defaultFilterParams },\n    { field: 'silver', filterParams: defaultFilterParams },\n    { field: 'bronze', filterParams: defaultFilterParams },\n    { field: 'total', filter: false },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n    sortable: true,\n    floatingFilter: true,\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 150,\n    filter: true,\n    sortable: true,\n    floatingFilter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'athlete',\n    filter: true,\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'age',\n    filter: 'agNumberColumnFilter',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'country',\n    filter: 'agSetColumnFilter',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'year',\n    maxWidth: 120,\n    filter: 'agNumberColumnFilter',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'date',\n    minWidth: 215,\n    filter: 'agDateColumnFilter',\n    filterParams : {\n    readOnly: true,\n    comparator: 'AG_LITERAL_dateComparator'\n },\n    suppressMenu: true },\n    {\n        field: 'sport',\n    suppressMenu: true,\n    filter: 'agMultiColumnFilter',\n    filterParams : {\n    filters: [\n    { filter: 'agTextColumnFilter', filterParams: { readOnly: true } },\n    { filter: 'agSetColumnFilter', filterParams: { readOnly: true } },\n],\n    readOnly: true\n } },\n    {\n        field: 'gold',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'silver',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'bronze',\n    filterParams: 'AG_LITERAL_defaultFilterParams' },\n    {\n        field: 'total',\n    filter: false }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "irelandAndUk",
      "params": "",
      "body": "function irelandAndUk() {\n    var countryFilterComponent = this.gridApi.getFilterInstance('country');\n    countryFilterComponent.setModel({ values: ['Ireland', 'Great Britain'] });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "clearCountryFilter",
      "params": "",
      "body": "function clearCountryFilter() {\n    var countryFilterComponent = this.gridApi.getFilterInstance('country');\n    countryFilterComponent.setModel(null);\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "destroyCountryFilter",
      "params": "",
      "body": "function destroyCountryFilter() {\n    this.gridApi.destroyFilter('country');\n}"
    },
    {
      "name": "endingStan",
      "params": "",
      "body": "function endingStan() {\n    var countryFilterComponent = this.gridApi.getFilterInstance('country');\n    var countriesEndingWithStan = countryFilterComponent\n        .getValues()\n        .filter(function (value) {\n        return value.indexOf('stan') === value.length - 4;\n    });\n    countryFilterComponent.setModel({ values: countriesEndingWithStan });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "printCountryModel",
      "params": "",
      "body": "function printCountryModel() {\n    var countryFilterComponent = this.gridApi.getFilterInstance('country');\n    var model = countryFilterComponent.getModel();\n    if (model) {\n        console.log('Country model is: ' + JSON.stringify(model));\n    }\n    else {\n        console.log('Country model filter is not active');\n    }\n}"
    },
    {
      "name": "sportStartsWithS",
      "params": "",
      "body": "function sportStartsWithS() {\n    var sportsFilterComponent = this.gridApi.getFilterInstance('sport');\n    sportsFilterComponent.setModel({\n        filterModels: [\n            {\n                type: 'startsWith',\n                filter: 's',\n            },\n        ],\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "sportEndsWithG",
      "params": "",
      "body": "function sportEndsWithG() {\n    var sportsFilterComponent = this.gridApi.getFilterInstance('sport');\n    sportsFilterComponent.setModel({\n        filterModels: [\n            {\n                type: 'endsWith',\n                filter: 'g',\n            },\n        ],\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "sportsCombined",
      "params": "",
      "body": "function sportsCombined() {\n    var sportsFilterComponent = this.gridApi.getFilterInstance('sport');\n    sportsFilterComponent.setModel({\n        filterModels: [\n            {\n                condition2: {\n                    type: 'endsWith',\n                    filter: 'g',\n                },\n                operator: 'AND',\n                condition1: {\n                    type: 'startsWith',\n                    filter: 's',\n                },\n            },\n        ],\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "ageBelow25",
      "params": "",
      "body": "function ageBelow25() {\n    var ageFilterComponent = this.gridApi.getFilterInstance('age');\n    ageFilterComponent.setModel({\n        type: 'lessThan',\n        filter: 25,\n        filterTo: null,\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "ageAbove30",
      "params": "",
      "body": "function ageAbove30() {\n    var ageFilterComponent = this.gridApi.getFilterInstance('age');\n    ageFilterComponent.setModel({\n        type: 'greaterThan',\n        filter: 30,\n        filterTo: null,\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "ageBelow25OrAbove30",
      "params": "",
      "body": "function ageBelow25OrAbove30() {\n    var ageFilterComponent = this.gridApi.getFilterInstance('age');\n    ageFilterComponent.setModel({\n        condition1: {\n            type: 'greaterThan',\n            filter: 30,\n            filterTo: null,\n        },\n        operator: 'OR',\n        condition2: {\n            type: 'lessThan',\n            filter: 25,\n            filterTo: null,\n        },\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "ageBetween25And30",
      "params": "",
      "body": "function ageBetween25And30() {\n    var ageFilterComponent = this.gridApi.getFilterInstance('age');\n    ageFilterComponent.setModel({\n        type: 'inRange',\n        filter: 25,\n        filterTo: 30,\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "clearAgeFilter",
      "params": "",
      "body": "function clearAgeFilter() {\n    var ageFilterComponent = this.gridApi.getFilterInstance('age');\n    ageFilterComponent.setModel(null);\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "after2010",
      "params": "",
      "body": "function after2010() {\n    var dateFilterComponent = this.gridApi.getFilterInstance('date');\n    dateFilterComponent.setModel({\n        type: 'greaterThan',\n        dateFrom: '2010-01-01',\n        dateTo: null,\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "before2012",
      "params": "",
      "body": "function before2012() {\n    var dateFilterComponent = this.gridApi.getFilterInstance('date');\n    dateFilterComponent.setModel({\n        type: 'lessThan',\n        dateFrom: '2012-01-01',\n        dateTo: null,\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "dateCombined",
      "params": "",
      "body": "function dateCombined() {\n    var dateFilterComponent = this.gridApi.getFilterInstance('date');\n    dateFilterComponent.setModel({\n        condition1: {\n            type: 'lessThan',\n            dateFrom: '2012-01-01',\n            dateTo: null,\n        },\n        operator: 'OR',\n        condition2: {\n            type: 'greaterThan',\n            dateFrom: '2010-01-01',\n            dateTo: null,\n        },\n    });\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "clearDateFilter",
      "params": "",
      "body": "function clearDateFilter() {\n    var dateFilterComponent = this.gridApi.getFilterInstance('date');\n    dateFilterComponent.setModel(null);\n    this.gridApi.onFilterChanged();\n}"
    },
    {
      "name": "clearSportFilter",
      "params": "",
      "body": "function clearSportFilter() {\n    var dateFilterComponent = this.gridApi.getFilterInstance('sport');\n    dateFilterComponent.setModel(null);\n    this.gridApi.onFilterChanged();\n}"
    }
  ],
  "utils": ["var defaultFilterParams = { readOnly: true };"],
  "callbackDependencies": {
    "irelandAndUk": ["gridOptions"],
    "clearCountryFilter": ["gridOptions"],
    "destroyCountryFilter": ["gridOptions"],
    "endingStan": ["gridOptions"],
    "printCountryModel": ["gridOptions"],
    "sportStartsWithS": ["gridOptions"],
    "sportEndsWithG": ["gridOptions"],
    "sportsCombined": ["gridOptions"],
    "ageBelow25": ["gridOptions"],
    "ageAbove30": ["gridOptions"],
    "ageBelow25OrAbove30": ["gridOptions"],
    "ageBetween25And30": ["gridOptions"],
    "clearAgeFilter": ["gridOptions"],
    "after2010": ["gridOptions"],
    "before2012": ["gridOptions"],
    "dateCombined": ["gridOptions"],
    "clearDateFilter": ["gridOptions"],
    "clearSportFilter": ["gridOptions"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "params.api.setRowData(data)"
  },
  "template": "<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <span class=\"button-group\">\n            <button onclick=\"irelandAndUk()\">Ireland &amp; UK</button>\n            <button onclick=\"endingStan()\">Countries Ending 'stan'</button>\n            <button onclick=\"printCountryModel()\">Print Country</button>\n            <button onclick=\"clearCountryFilter()\">Clear Country</button>\n            <button onclick=\"destroyCountryFilter()\">Destroy Country</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"ageBelow25()\">Age Below 25</button>\n            <button onclick=\"ageAbove30()\">Age Above 30</button>\n            <button onclick=\"ageBelow25OrAbove30()\">Age Below 25 or Above 30</button>\n            <button onclick=\"ageBetween25And30()\">Age Between 25 and 30</button>\n            <button onclick=\"clearAgeFilter()\">Clear Age Filter</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"after2010()\">Date after 01/01/2010</button>\n            <button onclick=\"before2012()\">Date before 01/01/2012</button>\n            <button onclick=\"dateCombined()\">Date combined</button>\n            <button onclick=\"clearDateFilter()\">Clear Date Filter</button>\n        </span>\n        <span class=\"button-group\">\n            <button onclick=\"sportStartsWithS()\">Sport starts with S</button>\n            <button onclick=\"sportEndsWithG()\">Sport ends with G</button>\n            <button onclick=\"sportsCombined()\">Sport starts with S and ends with G</button>\n            <button onclick=\"clearSportFilter()\">Clear Sport Filter</button>\n        </span>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 624,
    "modules": ["clientside", "setfilter", "menu", "columnpanel"]
  }
}
