{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'firstName' },\n    { field: 'lastName' },\n    { field: 'gender' },\n    { field: 'age' },\n    { field: 'mood' },\n    { field: 'country' },\n    { field: 'address', minWidth: 550 },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 110,\n    editable: true,\n    resizable: true,\n}"
    },
    { "name": "rowData", "value": "getData()" },
    { "name": "pinnedTopRowData", "value": "getPinnedTopData()" },
    { "name": "pinnedBottomRowData", "value": "getPinnedBottomData()" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 110,\n    editable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{ field: 'firstName' },\n    { field: 'lastName' },\n    { field: 'gender' },\n    { field: 'age' },\n    { field: 'mood' },\n    { field: 'country' },\n    {\n        field: 'address',\n    minWidth: 550 }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtStopEditing",
      "params": "",
      "body": "function onBtStopEditing() {\n    this.gridApi.stopEditing();\n}"
    },
    {
      "name": "onBtStartEditing",
      "params": "",
      "body": "function onBtStartEditing(key, char, pinned) {\n    this.gridApi.setFocusedCell(0, 'lastName', pinned);\n    this.gridApi.startEditingCell({\n        rowIndex: 0,\n        colKey: 'lastName',\n        // set to 'top', 'bottom' or undefined\n        rowPinned: pinned,\n        key: key,\n        charPress: char,\n    });\n}"
    },
    {
      "name": "onBtNextCell",
      "params": "",
      "body": "function onBtNextCell() {\n    this.gridApi.tabToNextCell();\n}"
    },
    {
      "name": "onBtPreviousCell",
      "params": "",
      "body": "function onBtPreviousCell() {\n    this.gridApi.tabToPreviousCell();\n}"
    },
    {
      "name": "onBtWhich",
      "params": "",
      "body": "function onBtWhich() {\n    var cellDefs = this.gridApi.getEditingCells();\n    if (cellDefs.length > 0) {\n        var cellDef = cellDefs[0];\n        console.log('editing cell is: row = ' +\n            cellDef.rowIndex +\n            ', col = ' +\n            cellDef.column.getId() +\n            ', floating = ' +\n            cellDef.rowPinned);\n    }\n    else {\n        console.log('no cells are editing');\n    }\n}"
    }
  ],
  "utils": [
    "function getPinnedTopData() {\n    return [\n        {\n            firstName: '##',\n            lastName: '##',\n            gender: '##',\n            address: '##',\n            mood: '##',\n            country: '##',\n        },\n    ];\n}",
    "function getPinnedBottomData() {\n    return [\n        {\n            firstName: '##',\n            lastName: '##',\n            gender: '##',\n            address: '##',\n            mood: '##',\n            country: '##',\n        },\n    ];\n}"
  ],
  "callbackDependencies": {
    "onBtStopEditing": ["gridOptions"],
    "onBtStartEditing": ["gridOptions"],
    "onBtNextCell": ["gridOptions"],
    "onBtPreviousCell": ["gridOptions"],
    "onBtWhich": ["gridOptions"]
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px; display: flex; justify-content: space-between;\">\n        <div>\n            <button onclick=\"onBtStartEditing()\">edit (0)</button>\n            <button onclick=\"onBtStartEditing('Delete')\">edit (0, Delete)</button>\n            <button onclick=\"onBtStartEditing(undefined, 'T')\">edit (0, 'T')</button>\n            <button onclick=\"onBtStartEditing(undefined, undefined, 'top')\">edit (0, Top)</button>\n            <button onclick=\"onBtStartEditing(undefined, undefined, 'bottom')\">edit (0, Bottom)</button>\n        </div>\n        <div>\n            <button onclick=\"onBtStopEditing()\">stop ()</button>\n            <button onclick=\"onBtNextCell()\">next ()</button>\n            <button onclick=\"onBtPreviousCell()\">previous ()</button>\n        </div>\n        <div>\n            <button onclick=\"onBtWhich()\">which ()</button>\n        </div>\n    </div>\n    <div class=\"grid-wrapper\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "exampleHeight": 545
  }
}
