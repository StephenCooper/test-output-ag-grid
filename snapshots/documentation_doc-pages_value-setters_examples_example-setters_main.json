{
  "eventHandlers": [
    {
      "name": "cellValueChanged",
      "handlerName": "onCellValueChanged",
      "handler": "function onCellValueChanged(event) {\n    console.log('Data after change is', event.data);\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Name',\n        valueGetter: function (params) {\n            return params.data.firstName + ' ' + params.data.lastName;\n        },\n        valueSetter: function (params) {\n            var fullName = params.newValue;\n            var nameSplit = fullName.split(' ');\n            var newFirstName = nameSplit[0];\n            var newLastName = nameSplit[1];\n            var data = params.data;\n            if (data.firstName !== newFirstName || data.lastName !== newLastName) {\n                data.firstName = newFirstName;\n                data.lastName = newLastName;\n                // return true to tell grid that the value has changed, so it knows\n                // to update the cell\n                return true;\n            }\n            else {\n                // return false, the grid doesn't need to update\n                return false;\n            }\n        },\n    },\n    {\n        headerName: 'A',\n        field: 'a',\n    },\n    {\n        headerName: 'B',\n        valueGetter: function (params) {\n            return params.data.b;\n        },\n        valueSetter: function (params) {\n            var newValInt = parseInt(params.newValue);\n            var valueChanged = params.data.b !== newValInt;\n            if (valueChanged) {\n                params.data.b = newValInt;\n            }\n            return valueChanged;\n        },\n    },\n    {\n        headerName: 'C.X',\n        valueGetter: function (params) {\n            if (params.data.c) {\n                return params.data.c.x;\n            }\n            else {\n                return undefined;\n            }\n        },\n        valueSetter: function (params) {\n            if (!params.data.c) {\n                params.data.c = {};\n            }\n            params.data.c.x = params.newValue;\n            return true; // we are lazy, always returning true\n        },\n    },\n    {\n        headerName: 'C.Y',\n        valueGetter: function (params) {\n            if (params.data.c) {\n                return params.data.c.y;\n            }\n            else {\n                return undefined;\n            }\n        },\n        valueSetter: function (params) {\n            if (!params.data.c) {\n                params.data.c = {};\n            }\n            params.data.c.y = params.newValue;\n            return true; // we are lazy, always returning true\n        },\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    resizable: true,\n    editable: true,\n}"
    },
    { "name": "rowData", "value": "getData()" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    resizable: true,\n    editable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Name',\n    valueGetter: \"AG_FUNCTION_function (params) {\\n    return params.data.firstName + \\' \\' + params.data.lastName;\\n}\",\n    valueSetter: \"AG_FUNCTION_function (params) {\\n    var fullName = params.newValue;\\n    var nameSplit = fullName.split(\\' \\');\\n    var newFirstName = nameSplit[0];\\n    var newLastName = nameSplit[1];\\n    var data = params.data;\\n    if (data.firstName !== newFirstName || data.lastName !== newLastName) {\\n        data.firstName = newFirstName;\\n        data.lastName = newLastName;\\n        // return true to tell grid that the value has changed, so it knows\\n        // to update the cell\\n        return true;\\n    }\\n    else {\\n        // return false, the grid doesn\\'t need to update\\n        return false;\\n    }\\n}\" },\n    {\n        headerName: 'A',\n    field: 'a' },\n    {\n        headerName: 'B',\n    valueGetter: \"AG_FUNCTION_function (params) {\\n    return params.data.b;\\n}\",\n    valueSetter: \"AG_FUNCTION_function (params) {\\n    var newValInt = parseInt(params.newValue);\\n    var valueChanged = params.data.b !== newValInt;\\n    if (valueChanged) {\\n        params.data.b = newValInt;\\n    }\\n    return valueChanged;\\n}\" },\n    {\n        headerName: 'C.X',\n    valueGetter: \"AG_FUNCTION_function (params) {\\n    if (params.data.c) {\\n        return params.data.c.x;\\n    }\\n    else {\\n        return undefined;\\n    }\\n}\",\n    valueSetter: \"AG_FUNCTION_function (params) {\\n    if (!params.data.c) {\\n        params.data.c = {};\\n    }\\n    params.data.c.x = params.newValue;\\n    return true; // we are lazy, always returning true\\n}\" },\n    {\n        headerName: 'C.Y',\n    valueGetter: \"AG_FUNCTION_function (params) {\\n    if (params.data.c) {\\n        return params.data.c.y;\\n    }\\n    else {\\n        return undefined;\\n    }\\n}\",\n    valueSetter: \"AG_FUNCTION_function (params) {\\n    if (!params.data.c) {\\n        params.data.c = {};\\n    }\\n    params.data.c.y = params.newValue;\\n    return true; // we are lazy, always returning true\\n}\" }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [],
  "callbackDependencies": {},
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark"
  }
}
