{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Month',\n        field: 'Month',\n        width: 75,\n        cellStyle: { color: 'darkred' },\n    },\n    {\n        headerName: 'Max Temp (˚C)',\n        field: 'Max temp (C)',\n        width: 120,\n        cellRenderer: 'deltaIndicator', // Function cell renderer\n    },\n    {\n        headerName: 'Min Temp (˚C)',\n        field: 'Min temp (C)',\n        width: 120,\n        cellRenderer: 'deltaIndicator', // Function cell renderer\n    },\n    {\n        headerName: 'Days of Air Frost',\n        field: 'Days of air frost (days)',\n        width: 233,\n        cellRenderer: 'daysFrostRenderer',\n        cellRendererParams: {\n            rendererImage: 'frost.png', // Complementing the Cell Renderer parameters\n        },\n    },\n    {\n        headerName: 'Days Sunshine',\n        field: 'Sunshine (hours)',\n        width: 190,\n        cellRenderer: 'daysSunshineRenderer',\n        cellRendererParams: {\n            rendererImage: 'sun.png', // Complementing the Cell Renderer parameters\n        },\n    },\n    {\n        headerName: 'Rainfall (10mm)',\n        field: 'Rainfall (mm)',\n        width: 180,\n        cellRenderer: 'rainPerTenMmRenderer',\n        cellRendererParams: {\n            rendererImage: 'rain.png', // Complementing the Cell Renderer parameters\n        },\n    },\n]"
    },
    { "name": "rowData", "value": "null" },
    {
      "name": "components",
      "value": "{\n    deltaIndicator: deltaIndicator,\n    daysFrostRenderer: DaysFrostRenderer,\n    daysSunshineRenderer: daysSunshineRenderer,\n    rainPerTenMmRenderer: rainPerTenMmRenderer,\n}"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true,\n}"
    }
  ],
  "components": [],
  "defaultColDef": null,
  "globalComponents": [],
  "parsedColDefs": "",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "/**\n * Demonstrating function cell renderer\n * Visually indicates if this months value is higher or lower than last months value\n * by adding an +/- symbols according to the difference\n */\nconst deltaIndicator = (params) => {\n    const element = document.createElement('span');\n    const imageElement = document.createElement('img');\n    // visually indicate if this months value is higher or lower than last months value\n    if (params.value > 15) {\n        imageElement.src =\n            'https://www.ag-grid.com/example-assets/weather/fire-plus.png';\n    }\n    else {\n        imageElement.src =\n            'https://www.ag-grid.com/example-assets/weather/fire-minus.png';\n    }\n    element.appendChild(imageElement);\n    element.appendChild(document.createTextNode(params.value));\n    return element;\n};",
    "/**\n *  Cell Renderer by Property (using the api)\n */\nconst daysSunshineRenderer = (params) => {\n    const daysSunshine = params.value / 24;\n    return createImageSpan(daysSunshine, params.rendererImage);\n};",
    "/**\n *  Cell Renderer by Property (using the grid options parameter)\n */\nconst rainPerTenMmRenderer = (params) => {\n    const rainPerTenMm = params.value / 10;\n    return createImageSpan(rainPerTenMm, params.rendererImage);\n};",
    "const createImageSpan = (imageMultiplier, image) => {\n    const resultElement = document.createElement('span');\n    for (let i = 0; i < imageMultiplier; i++) {\n        const imageElement = document.createElement('img');\n        imageElement.src = 'https://www.ag-grid.com/example-assets/weather/' + image;\n        resultElement.appendChild(imageElement);\n    }\n    return resultElement;\n};"
  ],
  "callbackDependencies": {},
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/weather-se-england.json'",
    "callback": "{\n    params.api.setRowData(data);\n}"
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <input type=\"button\" value=\"Frostier Year\" onclick=\"frostierYear(Math.floor(Math.random() * 2) + 1)\">\n    </div>\n\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
