{
  "eventHandlers": [],
  "properties": [
    { "name": "getRowNodeId", "value": null },
    {
      "name": "columnDefs",
      "value": "[\n    { field: \"city\", rowGroup: true, hide: true, },\n    { field: 'laptop', rowGroup: true, hide: true, },\n    { field: 'distro', sort: 'asc', comparator: myComparator },\n    { field: 'value', enableCellChangeFlash: true, aggFunc: myAggFunc, filter: myFilter }\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    filter: true,\n    sortable: true,\n    resizable: true,\n}"
    },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "groupSelectsChildren", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "suppressAggAtRootLevel", "value": "true" },
    { "name": "suppressRowClickSelection", "value": "true" },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    field: 'name',\n    cellRendererParams: { checkbox: true },\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    filter: true,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: \"city\",\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'laptop',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'distro',\n    sort: 'asc',\n    comparator: 'AG_LITERAL_myComparator' },\n    {\n        field: 'value',\n    enableCellChangeFlash: true,\n    aggFunc: 'AG_LITERAL_myAggFunc',\n    filter: 'AG_LITERAL_myFilter' }]",
  "instanceMethods": ["function getRowNodeId(data) {\n    return data.id;\n}"],
  "externalEventHandlers": [
    {
      "name": "onBtDuplicate",
      "params": "",
      "body": "function onBtDuplicate() {\n    var api = this.gridApi;\n    // get the first child of the\n    var selectedRows = api.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n    var newItems = [];\n    selectedRows.forEach(function (selectedRow) {\n        idCounter++;\n        var newItem = createDataItem(idCounter, selectedRow.name, selectedRow.distro, selectedRow.laptop, selectedRow.city, selectedRow.value);\n        newItems.push(newItem);\n    });\n    timeOperation('Duplicate', function () {\n        api.applyTransaction({ add: newItems });\n    });\n}"
    },
    {
      "name": "onBtUpdate",
      "params": "",
      "body": "function onBtUpdate() {\n    var api = this.gridApi;\n    // get the first child of the\n    var selectedRows = api.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n    var updatedItems = [];\n    selectedRows.forEach(function (oldItem) {\n        var newValue = Math.floor(Math.random() * 100) + 10;\n        var newItem = createDataItem(oldItem.id, oldItem.name, oldItem.distro, oldItem.laptop, oldItem.city, newValue);\n        updatedItems.push(newItem);\n    });\n    timeOperation('Update', function () {\n        api.applyTransaction({ update: updatedItems });\n    });\n}"
    },
    {
      "name": "onBtDelete",
      "params": "",
      "body": "function onBtDelete() {\n    var api = this.gridApi;\n    // get the first child of the\n    var selectedRows = api.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!');\n        return;\n    }\n    timeOperation('Delete', function () {\n        api.applyTransaction({ remove: selectedRows });\n    });\n}"
    },
    {
      "name": "onBtClearSelection",
      "params": "",
      "body": "function onBtClearSelection() {\n    this.gridApi.deselectAll();\n}"
    }
  ],
  "utils": [
    "var aggCallCount = 0;",
    "var compareCallCount = 0;",
    "var filterCallCount = 0;",
    "var idCounter = 0;",
    "function myAggFunc(params) {\n    aggCallCount++;\n    var total = 0;\n    for (var i = 0; i < params.values.length; i++) {\n        total += params.values[i];\n    }\n    return total;\n}",
    "function myComparator(a, b) {\n    compareCallCount++;\n    return a < b ? -1 : 1;\n}",
    "function getMyFilter() {\n    class MyFilter {\n        init(params) {\n            this.filterParams = params;\n            this.filterValue = null;\n            this.eGui = document.createElement('div');\n            this.eGui.innerHTML = '<div>Greater Than: <input type=\"text\"/></div>';\n            this.eInput = this.eGui.querySelector('input');\n            var that = this;\n            this.eInput.addEventListener('input', function () {\n                that.getValueFromInput();\n                params.filterChangedCallback();\n            });\n        }\n        getGui() {\n            return this.eGui;\n        }\n        getValueFromInput() {\n            var value = parseInt(this.eInput.value);\n            this.filterValue = isNaN(value) ? null : value;\n        }\n        setModel(model) {\n            this.eInput.value = model == null ? null : model.value;\n            this.getValueFromInput();\n        }\n        getModel() {\n            if (!this.isFilterActive()) {\n                return null;\n            }\n            return { value: this.eInput.value };\n        }\n        isFilterActive() {\n            return this.filterValue !== null;\n        }\n        doesFilterPass(params) {\n            filterCallCount++;\n            const { api, colDef, column, columnApi, context } = this.filterParams;\n            const { node } = params;\n            const value = this.filterParams.valueGetter({\n                api,\n                colDef,\n                column,\n                columnApi,\n                context,\n                data: node.data,\n                getValue: (field) => node.data[field],\n                node,\n            });\n            return value > (this.filterValue || 0);\n        }\n    }\n    return MyFilter;\n}",
    "var myFilter = getMyFilter();",
    "function timeOperation(name, operation) {\n    aggCallCount = 0;\n    compareCallCount = 0;\n    filterCallCount = 0;\n    var start = new Date().getTime();\n    operation();\n    var end = new Date().getTime();\n    console.log(name +\n        ' finished in ' +\n        (end - start) +\n        'ms, aggCallCount = ' +\n        aggCallCount +\n        ', compareCallCount = ' +\n        compareCallCount +\n        ', filterCallCount = ' +\n        filterCallCount);\n}",
    "function letter(i) {\n    return 'abcdefghijklmnopqrstuvwxyz'.substr(i, 1);\n}",
    "function randomLetter() {\n    return letter(Math.floor(Math.random() * 26 + 1));\n}",
    "function getData() {\n    var myRowData = [];\n    for (var i = 0; i < 10000; i++) {\n        var name = 'Mr ' +\n            randomLetter().toUpperCase() +\n            ' ' +\n            randomLetter().toUpperCase() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter();\n        var city = CITIES[i % CITIES.length];\n        var distro = LINUX_DISTROS[i % LINUX_DISTROS.length] +\n            ' v' +\n            Math.floor(Math.random() * 100 + 1) / 10;\n        var university = LAPTOPS[i % LAPTOPS.length];\n        var value = Math.floor(Math.random() * 100) + 10; // between 10 and 110\n        idCounter++;\n        myRowData.push(createDataItem(idCounter, name, distro, university, city, value));\n    }\n    return myRowData;\n}",
    "function createDataItem(id, name, distro, laptop, city, value) {\n    return {\n        id: id,\n        name: name,\n        city: city,\n        distro: distro,\n        laptop: laptop,\n        value: value,\n    };\n}"
  ],
  "callbackDependencies": {
    "myAggFunc": ["aggCallCount"],
    "myComparator": ["compareCallCount"],
    "onBtDuplicate": ["gridOptions", "timeOperation"],
    "onBtUpdate": ["gridOptions", "timeOperation"],
    "onBtDelete": ["gridOptions", "timeOperation"],
    "onBtClearSelection": ["gridOptions"],
    "timeOperation": [
      "aggCallCount",
      "compareCallCount",
      "filterCallCount",
      "Date"
    ],
    "letter": ["'abcdefghijklmnopqrstuvwxyz'"],
    "randomLetter": ["letter"],
    "getData": ["randomLetter", "Math", "idCounter"]
  },
  "onGridReady": "{\n    params.api.setFilterModel({\n        value: { value: '50' },\n    });\n    timeOperation('Initialisation', function () {\n        params.api.setRowData(getData());\n    });\n    params.api.getDisplayedRowAtIndex(2).setExpanded(true);\n    params.api.getDisplayedRowAtIndex(4).setExpanded(true);\n}",
  "template": "<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpdate()\">Update</button>\n        <button onclick=\"onBtDuplicate()\">Duplicate</button>\n        <button onclick=\"onBtDelete()\">Delete</button>\n        <button onclick=\"onBtClearSelection()\">Clear Selection</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "modules": ["clientside", "rowgrouping"]
  }
}
