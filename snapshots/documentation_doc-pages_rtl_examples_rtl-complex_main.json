{
  "eventHandlers": [],
  "properties": [
    {
      "name": "defaultColDef",
      "value": "{\n    editable: true,\n    sortable: true,\n    minWidth: 100,\n    filter: true,\n    floatingFilter: true,\n    resizable: true,\n}"
    },
    {
      "name": "components",
      "value": "{\n    personFilter: getPersonFilter(),\n}"
    },
    { "name": "sideBar", "value": "true" },
    { "name": "rowGroupPanelShow", "value": "'always'" },
    { "name": "pivotPanelShow", "value": "'always'" },
    { "name": "enableRtl", "value": "true" },
    { "name": "animateRows", "value": "true" },
    {
      "name": "statusBar",
      "value": "{\n    statusPanels: [{ statusPanel: 'agAggregationComponent' }],\n}"
    },
    { "name": "enableRangeSelection", "value": "true" },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "groupSelectsChildren", "value": "true" },
    { "name": "suppressRowClickSelection", "value": "true" },
    {
      "name": "getBusinessKeyForNode",
      "value": "function (node) {\n    if (node.data) {\n        return node.data.name;\n    }\n    else {\n        return '';\n    }\n}"
    },
    { "name": "getContextMenuItems", "value": null }
  ],
  "components": [],
  "defaultColDef": null,
  "globalComponents": [],
  "parsedColDefs": "",
  "instanceMethods": [
    "function getContextMenuItems(params) {\n    var result = params.defaultItems.splice(0);\n    result.push({\n        name: 'Custom Menu Item',\n        icon: '<img src=\"https://www.ag-grid.com/examples-assets/lab.png\" style=\"width: 14px;\" />',\n        //shortcut: 'Alt + M',\n        action: function () {\n            var value = params.value ? params.value : '<empty>';\n            window.alert('You clicked a custom menu item on cell ' + value);\n        },\n    });\n    return result;\n}"
  ],
  "externalEventHandlers": [],
  "utils": [
    "var colNames = [\n    'Station',\n    'Railway',\n    'Street',\n    'Address',\n    'Toy',\n    'Soft Box',\n    'Make and Model',\n    'Longest Day',\n    'Shortest Night',\n];",
    "var countries = [\n    { country: 'Ireland', continent: 'Europe', language: 'English' },\n    { country: 'Spain', continent: 'Europe', language: 'Spanish' },\n    { country: 'United Kingdom', continent: 'Europe', language: 'English' },\n    { country: 'France', continent: 'Europe', language: 'French' },\n    { country: 'Germany', continent: 'Europe', language: 'German' },\n    { country: 'Luxembourg', continent: 'Europe', language: 'French' },\n    { country: 'Sweden', continent: 'Europe', language: 'Swedish' },\n    { country: 'Norway', continent: 'Europe', language: 'Norwegian' },\n    { country: 'Italy', continent: 'Europe', language: 'Italian' },\n    { country: 'Greece', continent: 'Europe', language: 'Greek' },\n    { country: 'Iceland', continent: 'Europe', language: 'Icelandic' },\n    { country: 'Portugal', continent: 'Europe', language: 'Portuguese' },\n    { country: 'Malta', continent: 'Europe', language: 'Maltese' },\n    { country: 'Brazil', continent: 'South America', language: 'Portuguese' },\n    { country: 'Argentina', continent: 'South America', language: 'Spanish' },\n    { country: 'Colombia', continent: 'South America', language: 'Spanish' },\n    { country: 'Peru', continent: 'South America', language: 'Spanish' },\n    { country: 'Venezuela', continent: 'South America', language: 'Spanish' },\n    { country: 'Uruguay', continent: 'South America', language: 'Spanish' },\n    { country: 'Belgium', continent: 'Europe', language: 'French' },\n];",
    "var games = [\n    'Chess',\n    'Cross and Circle',\n    'Daldøs',\n    'Downfall',\n    'DVONN',\n    'Fanorona',\n    'Game of the Generals',\n    'Ghosts',\n    'Abalone',\n    'Agon',\n    'Backgammon',\n    'Battleship',\n    'Blockade',\n    'Blood Bowl',\n    'Bul',\n    'Camelot',\n    'Checkers',\n    'Go',\n    'Gipf',\n    'Guess Who?',\n    'Hare and Hounds',\n    'Hex',\n    'Hijara',\n    'Isola',\n    'Janggi (Korean Chess)',\n    'Le Jeu de la Guerre',\n    'Patolli',\n    'Plateau',\n    'PÜNCT',\n    'Rithmomachy',\n    'Sáhkku',\n    'Senet',\n    'Shogi',\n    'Space Hulk',\n    'Stratego',\n    'Sugoroku',\n    'Tâb',\n    'Tablut',\n    'Tantrix',\n    'Wari',\n    'Xiangqi (Chinese chess)',\n    'YINSH',\n    'ZÈRTZ',\n    'Kalah',\n    'Kamisado',\n    'Liu po',\n    'Lost Cities',\n    'Mad Gab',\n    'Master Mind',\n    \"Nine Men's Morris\",\n    'Obsession',\n    'Othello',\n];",
    "var booleanValues = [true, 'true', false, 'false'];",
    "var firstNames = [\n    'Sophie',\n    'Isabelle',\n    'Emily',\n    'Olivia',\n    'Lily',\n    'Chloe',\n    'Isabella',\n    'Amelia',\n    'Jessica',\n    'Sophia',\n    'Ava',\n    'Charlotte',\n    'Mia',\n    'Lucy',\n    'Grace',\n    'Ruby',\n    'Ella',\n    'Evie',\n    'Freya',\n    'Isla',\n    'Poppy',\n    'Daisy',\n    'Layla',\n];",
    "var lastNames = [\n    'Beckham',\n    'Black',\n    'Braxton',\n    'Brennan',\n    'Brock',\n    'Bryson',\n    'Cadwell',\n    'Cage',\n    'Carson',\n    'Chandler',\n    'Cohen',\n    'Cole',\n    'Corbin',\n    'Dallas',\n    'Dalton',\n    'Dane',\n    'Donovan',\n    'Easton',\n    'Fisher',\n    'Fletcher',\n    'Grady',\n    'Greyson',\n    'Griffin',\n    'Gunner',\n    'Hayden',\n    'Hudson',\n    'Hunter',\n    'Jacoby',\n    'Jagger',\n    'Jaxon',\n    'Jett',\n    'Kade',\n    'Kane',\n    'Keating',\n    'Keegan',\n    'Kingston',\n    'Kobe',\n];",
    "var months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n];",
    "var dataSize = '.1x22';",
    "var groupColumn = {\n    headerName: 'Group',\n    width: 200,\n    field: 'name',\n    valueGetter: function (params) {\n        if (params.node && params.node.group) {\n            return params.node.key;\n        }\n        else {\n            return params.data[params.colDef.field];\n        }\n    },\n    cellRenderer: 'agGroupCellRenderer',\n    headerCheckboxSelection: true,\n    headerCheckboxSelectionFilteredOnly: true,\n    cellRendererParams: {\n        checkbox: true,\n    },\n};",
    "var firstColumn = {\n    headerName: 'Name',\n    field: 'name',\n    width: 200,\n    editable: true,\n    enableRowGroup: true,\n    // enablePivot: true,\n    filter: 'personFilter',\n    checkboxSelection: function (params) {\n        // we put checkbox on the name if we are not doing no grouping\n        return params.columnApi.getRowGroupColumns().length === 0;\n    },\n    headerCheckboxSelection: function (params) {\n        // we put checkbox on the name if we are not doing grouping\n        return params.columnApi.getRowGroupColumns().length === 0;\n    },\n    headerCheckboxSelectionFilteredOnly: true,\n    icons: {\n        sortAscending: '<i class=\"fa fa-sort-alpha-up\"/>',\n        sortDescending: '<i class=\"fa fa-sort-alpha-down\"/>',\n    },\n};",
    "var defaultCols = [\n    {\n        // column group 'Participant\n        headerName: 'Participant',\n        // marryChildren: true,\n        children: [\n            firstColumn,\n            {\n                field: 'language',\n                width: 150,\n                editable: true,\n                filter: 'agSetColumnFilter',\n                cellRenderer: languageCellRenderer,\n                cellEditor: 'agSelectCellEditor',\n                enableRowGroup: true,\n                enablePivot: true,\n                // rowGroupIndex: 0,\n                // pivotIndex: 0,\n                cellEditorParams: {\n                    values: [\n                        'English',\n                        'Spanish',\n                        'French',\n                        'Portuguese',\n                        'German',\n                        'Swedish',\n                        'Norwegian',\n                        'Italian',\n                        'Greek',\n                        'Icelandic',\n                        'Portuguese',\n                        'Maltese',\n                    ],\n                },\n                pinned: 'right',\n                headerTooltip: 'Example tooltip for Language',\n            },\n            {\n                field: 'country',\n                width: 150,\n                editable: true,\n                cellRenderer: getCountryCellRenderer(),\n                // pivotIndex: 1,\n                // rowGroupIndex: 1,\n                enableRowGroup: true,\n                enablePivot: true,\n                cellEditor: 'agRichSelectCellEditor',\n                cellEditorParams: {\n                    cellRenderer: getCountryCellRenderer(),\n                    values: [\n                        'Argentina',\n                        'Brazil',\n                        'Colombia',\n                        'France',\n                        'Germany',\n                        'Greece',\n                        'Iceland',\n                        'Ireland',\n                        'Italy',\n                        'Malta',\n                        'Portugal',\n                        'Norway',\n                        'Peru',\n                        'Spain',\n                        'Sweden',\n                        'United Kingdom',\n                        'Uruguay',\n                        'Venezuela',\n                        'Belgium',\n                        'Luxembourg',\n                    ],\n                },\n                // pinned: 'left',        \n                filterParams: {\n                    cellRenderer: getCountryCellRenderer(),\n                },\n            },\n        ],\n    },\n    {\n        // column group 'Game of Choice'\n        headerName: 'Game of Choice',\n        children: [\n            {\n                headerName: 'Game Name',\n                field: 'game.name',\n                width: 180,\n                editable: true,\n                filter: 'agSetColumnFilter',\n                tooltipField: 'game.name',\n                cellClass: function () {\n                    return 'alphabet';\n                },\n                enableRowGroup: true,\n                enablePivot: true,\n                pinned: 'left',\n                // rowGroupIndex: 1,\n                icons: {\n                    sortAscending: '<i class=\"fa fa-sort-alpha-up\"/>',\n                    sortDescending: '<i class=\"fa fa-sort-alpha-down\"/>',\n                },\n            },\n            {\n                headerName: 'Bought',\n                field: 'game.bought',\n                filter: 'agSetColumnFilter',\n                editable: true,\n                width: 100,\n                // pinned: 'right',\n                // rowGroupIndex: 2,\n                // pivotIndex: 1,\n                enableRowGroup: true,\n                enablePivot: true,\n                enableValue: true,\n                cellRenderer: booleanCellRenderer,\n                cellStyle: { 'text-align': 'center' },\n                comparator: booleanComparator,\n                filterParams: { cellRenderer: booleanFilterCellRenderer },\n            },\n        ],\n    },\n    {\n        // column group 'Performance'\n        groupId: 'performance',\n        children: [\n            {\n                field: 'bankBalance',\n                width: 150,\n                editable: true,\n                filter: getWinningsFilter(),\n                cellRenderer: currencyRenderer,\n                cellStyle: currencyCssFunc,\n                filterParams: { cellRenderer: currencyRenderer },\n                enableValue: true,\n                // colId: 'sf',\n                // valueGetter: '55',\n                // aggFunc: 'sum',\n                icons: {\n                    sortAscending: '<i class=\"fa fa-sort-amount-up\"/>',\n                    sortDescending: '<i class=\"fa fa-sort-amount-down\"/>',\n                },\n            },\n            {\n                headerName: 'Extra Info 1',\n                columnGroupShow: 'open',\n                width: 150,\n                editable: false,\n                sortable: false,\n                suppressMenu: true,\n                cellStyle: { 'text-align': 'right' },\n                cellRenderer: function () {\n                    return 'Abra...';\n                },\n            },\n            {\n                headerName: 'Extra Info 2',\n                columnGroupShow: 'open',\n                width: 150,\n                editable: false,\n                sortable: false,\n                suppressMenu: true,\n                cellStyle: { 'text-align': 'left' },\n                cellRenderer: function () {\n                    return '...cadabra!';\n                },\n            },\n        ],\n    },\n    {\n        field: 'rating',\n        width: 100,\n        editable: true,\n        cellRenderer: ratingRenderer,\n        enableRowGroup: true,\n        enablePivot: true,\n        enableValue: true,\n        filterParams: { cellRenderer: ratingFilterRenderer },\n    },\n    {\n        field: 'totalWinnings',\n        filter: 'agNumberColumnFilter',\n        editable: true,\n        newValueHandler: numberNewValueHandler,\n        width: 150,\n        // aggFunc: 'sum',\n        enableValue: true,\n        cellRenderer: currencyRenderer,\n        cellStyle: currencyCssFunc,\n        icons: {\n            sortAscending: '<i class=\"fa fa-sort-amount-up\"/>',\n            sortDescending: '<i class=\"fa fa-sort-amount-down\"/>',\n        },\n    },\n];",
    "//put in the month cols\nvar monthGroup = {\n    headerName: 'Monthly Breakdown',\n    children: [],\n};",
    "function getColCount() {\n    switch (dataSize) {\n        case '10x100':\n            return 100;\n        default:\n            return 22;\n    }\n}",
    "function getRowCount() {\n    switch (dataSize) {\n        case '.1x22':\n            return 100;\n        case '1x22':\n            return 1000;\n        case '10x100':\n            return 10000;\n        case '100x22':\n            return 100000;\n        default:\n            return -1;\n    }\n}",
    "function createCols() {\n    var colCount = getColCount();\n    // start with a copy of the default cols\n    var columns = defaultCols.slice(0, colCount);\n    // there are 22 cols by default\n    for (var col = 22; col < colCount; col++) {\n        var colName = colNames[col % colNames.length];\n        var colDef = {\n            headerName: colName,\n            field: 'col' + col,\n            width: 200,\n            editable: true,\n        };\n        columns.push(colDef);\n    }\n    return columns;\n}",
    "var loadInstance = 0;",
    "function createData() {\n    loadInstance++;\n    var loadInstanceCopy = loadInstance;\n    gridInstance.api.showLoadingOverlay();\n    var colDefs = createCols();\n    var rowCount = getRowCount();\n    var colCount = getColCount();\n    var row = 0;\n    var data = [];\n    var intervalId = setInterval(function () {\n        if (loadInstanceCopy != loadInstance) {\n            clearInterval(intervalId);\n            return;\n        }\n        for (var i = 0; i < 1000; i++) {\n            if (row < rowCount) {\n                var rowItem = createRowItem(row, colCount);\n                data.push(rowItem);\n                row++;\n            }\n        }\n        if (row >= rowCount) {\n            clearInterval(intervalId);\n            setTimeout(function () {\n                gridInstance.api.setColumnDefs(colDefs);\n                gridInstance.api.setRowData(data);\n            }, 0);\n        }\n    }, 0);\n}",
    "function createRowItem(row, colCount) {\n    var rowItem = {};\n    //create data for the known columns\n    var countriesToPickFrom = Math.floor(countries.length * (((row % 3) + 1) / 3));\n    var countryData = countries[(row * 19) % countriesToPickFrom];\n    rowItem.country = countryData.country;\n    rowItem.continent = countryData.continent;\n    rowItem.language = countryData.language;\n    var firstName = firstNames[row % firstNames.length];\n    var lastName = lastNames[row % lastNames.length];\n    rowItem.name = firstName + ' ' + lastName;\n    rowItem.game = {\n        name: games[Math.floor(((row * 13) / 17) * 19) % games.length],\n        bought: booleanValues[row % booleanValues.length],\n    };\n    rowItem.bankBalance = Math.round(pseudoRandom() * 10000000) / 100 - 3000;\n    rowItem.rating = Math.round(pseudoRandom() * 5);\n    var totalWinnings = 0;\n    months.forEach(function (month) {\n        var value = Math.round(pseudoRandom() * 10000000) / 100 - 20;\n        rowItem[month.toLocaleLowerCase()] = value;\n        totalWinnings += value;\n    });\n    rowItem.totalWinnings = totalWinnings;\n    //create dummy data for the additional columns\n    for (var col = defaultCols.length; col < colCount; col++) {\n        var value;\n        var randomBit = pseudoRandom().toString().substring(2, 5);\n        value =\n            colNames[col % colNames.length] +\n                '-' +\n                randomBit +\n                ' - (' +\n                (row + 1) +\n                ',' +\n                col +\n                ')';\n        rowItem['col' + col] = value;\n    }\n    return rowItem;\n}",
    "// taken from http://stackoverflow.com/questions/3062746/special-simple-random-number-generator\nvar seed = 123456789;",
    "var m = Math.pow(2, 32);",
    "var a = 1103515245;",
    "var c = 12345;",
    "function pseudoRandom() {\n    seed = (a * seed + c) % m;\n    return seed / m;\n}",
    "function selectionChanged(event) {\n    console.log('Callback selectionChanged: selection count = ' +\n        gridInstance.api.getSelectedNodes().length);\n}",
    "function rowSelected(event) {\n    // the number of rows selected could be huge, if the user is grouping and selects a group, so\n    // to stop the console from clogging up, we only print if in the first 10 (by chance we know\n    // the node id's are assigned from 0 upwards)\n    if (Number(event.node.id) < 10) {\n        var valueToPrint = event.node.group\n            ? 'group (' + event.node.key + ')'\n            : event.node.data.name;\n        console.log('Callback rowSelected: ' + valueToPrint);\n    }\n}",
    "var COUNTRY_CODES = {\n    Ireland: 'ie',\n    Luxembourg: 'lu',\n    Belgium: 'be',\n    Spain: 'es',\n    'United Kingdom': 'gb',\n    France: 'fr',\n    Germany: 'de',\n    Sweden: 'se',\n    Italy: 'it',\n    Greece: 'gr',\n    Iceland: 'is',\n    Portugal: 'pt',\n    Malta: 'mt',\n    Norway: 'no',\n    Brazil: 'br',\n    Argentina: 'ar',\n    Colombia: 'co',\n    Peru: 'pe',\n    Venezuela: 've',\n    Uruguay: 'uy',\n};",
    "function numberNewValueHandler(params) {\n    var newValue = params.newValue;\n    var valueAsNumber;\n    if (newValue === null || newValue === undefined || newValue === '') {\n        valueAsNumber = null;\n    }\n    else {\n        valueAsNumber = parseFloat(params.newValue);\n    }\n    var field = params.colDef.field;\n    var data = params.data;\n    data[field] = valueAsNumber;\n    return true;\n}",
    "function currencyCssFunc(params) {\n    if (params.value !== null && params.value !== undefined && params.value < 0) {\n        return { color: 'red', 'text-align': 'right', 'font-weight': 'bold' };\n    }\n    else {\n        return { 'text-align': 'right' };\n    }\n}",
    "function ratingFilterRenderer(params) {\n    return ratingRendererGeneral(params.value, true);\n}",
    "function ratingRenderer(params) {\n    return ratingRendererGeneral(params.value, false);\n}",
    "function ratingRendererGeneral(value, forFilter) {\n    if (value === '(Select All)') {\n        return value;\n    }\n    var result = '<span>';\n    for (var i = 0; i < 5; i++) {\n        if (value > i) {\n            result +=\n                '<img src=\"https://www.ag-grid.com/example-assets/gold-star.png\" />';\n        }\n    }\n    if (forFilter && Number(value) === 0) {\n        result += '(No stars)';\n    }\n    return result;\n}",
    "function currencyRenderer(params) {\n    if (params.value === null || params.value === undefined) {\n        return null;\n    }\n    else if (isNaN(params.value)) {\n        return 'NaN';\n    }\n    else {\n        // if we are doing 'count', then we do not show pound sign\n        if (params.node.group && params.column.getAggFunc() === 'count') {\n            return params.value;\n        }\n        else {\n            return ('&pound;' +\n                Math.floor(params.value)\n                    .toString()\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'));\n        }\n    }\n}",
    "function booleanComparator(value1, value2) {\n    var value1Cleaned = booleanCleaner(value1);\n    var value2Cleaned = booleanCleaner(value2);\n    var value1Ordinal = value1Cleaned === true ? 0 : value1Cleaned === false ? 1 : 2;\n    var value2Ordinal = value2Cleaned === true ? 0 : value2Cleaned === false ? 1 : 2;\n    return value1Ordinal - value2Ordinal;\n}",
    "var count = 0;",
    "function booleanCellRenderer(params) {\n    count++;\n    if (count <= 1) {\n        // params.api.onRowHeightChanged();\n    }\n    var valueCleaned = booleanCleaner(params.value);\n    if (valueCleaned === true) {\n        //this is the unicode for tick character\n        return \"<span title='true'>&#10004;</span>\";\n    }\n    else if (valueCleaned === false) {\n        //this is the unicode for cross character\n        return \"<span title='false'>&#10006;</span>\";\n    }\n    else if (params.value !== null && params.value !== undefined) {\n        return params.value.toString();\n    }\n    else {\n        return null;\n    }\n}",
    "function booleanFilterCellRenderer(params) {\n    var valueCleaned = booleanCleaner(params.value);\n    if (valueCleaned === true) {\n        //this is the unicode for tick character\n        return '&#10004;';\n    }\n    else if (valueCleaned === false) {\n        //this is the unicode for cross character\n        return '&#10006;';\n    }\n    else if (params.value === '(Select All)') {\n        return params.value;\n    }\n    else {\n        return '(empty)';\n    }\n}",
    "function booleanCleaner(value) {\n    if (value === 'true' || value === true || value === 1) {\n        return true;\n    }\n    else if (value === 'false' || value === false || value === 0) {\n        return false;\n    }\n    else {\n        return null;\n    }\n}",
    "function languageCellRenderer(params) {\n    if (params.$scope) {\n        return (\"<span ng-click='clicked=true' ng-show='!clicked'>Click Me</span>\" +\n            \"<span ng-click='clicked=false' ng-show='clicked' ng-bind='data.language'></span>\");\n    }\n    else if (params.value !== null && params.value !== undefined) {\n        return params.value;\n    }\n    else {\n        return null;\n    }\n}"
  ],
  "callbackDependencies": {
    "getColCount": ["dataSize"],
    "getRowCount": ["dataSize"],
    "createCols": ["getColCount", "defaultCols", "colNames"],
    "createData": [
      "loadInstance",
      "gridOptions",
      "createCols",
      "getRowCount",
      "getColCount",
      "setInterval"
    ],
    "createRowItem": [
      "Math",
      "countries",
      "firstNames",
      "lastNames",
      "games",
      "booleanValues",
      "months",
      "defaultCols",
      "pseudoRandom",
      "colNames"
    ],
    "pseudoRandom": ["seed", "a", "c", "m"],
    "rowSelected": ["Number"],
    "numberNewValueHandler": ["parseFloat"],
    "ratingFilterRenderer": ["ratingRendererGeneral"],
    "ratingRenderer": ["ratingRendererGeneral"],
    "ratingRendererGeneral": ["Number"],
    "currencyRenderer": ["isNaN", "Math"],
    "booleanComparator": ["booleanCleaner"],
    "booleanCellRenderer": ["count", "booleanCleaner"],
    "booleanFilterCellRenderer": ["booleanCleaner"]
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true
  }
}
