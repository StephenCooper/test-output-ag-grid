{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Top Level Column Group',\n        children: [\n            {\n                headerName: 'Group A',\n                children: [\n                    { field: 'athlete', minWidth: 200 },\n                    {\n                        field: 'age',\n                        cellClass: 'twoDecimalPlaces',\n                        cellClassRules: {\n                            greenBackground: function (params) {\n                                return params.value < 23;\n                            },\n                            redFont: function (params) {\n                                return params.value < 20;\n                            },\n                        },\n                    },\n                    {\n                        field: 'country',\n                        minWidth: 200,\n                        cellClassRules: {\n                            redFont: function (params) {\n                                return params.value === 'United States';\n                            },\n                        },\n                    },\n                    {\n                        headerName: 'Group',\n                        valueGetter: 'data.country.charAt(0)',\n                        cellClassRules: {\n                            boldBorders: function (params) {\n                                return params.value === 'U';\n                            },\n                        },\n                        cellClass: ['redFont', 'greenBackground'],\n                    },\n                    {\n                        field: 'year',\n                        cellClassRules: {\n                            notInExcel: function (params) {\n                                return true;\n                            },\n                        },\n                    },\n                ],\n            },\n            {\n                headerName: 'Group B',\n                children: [\n                    {\n                        field: 'date',\n                        minWidth: 150,\n                        cellClass: 'dateFormat',\n                        valueGetter: function (params) {\n                            var val = params.data.date;\n                            if (val.indexOf('/') < 0) {\n                                return val;\n                            }\n                            var split = val.split('/');\n                            return split[2] + '-' + split[1] + '-' + split[0];\n                        },\n                    },\n                    { field: 'sport', minWidth: 150 },\n                    {\n                        field: 'gold',\n                        cellClassRules: {\n                            boldBorders: function (params) {\n                                return params.value > 2;\n                            },\n                        },\n                    },\n                    { field: 'silver', cellClass: 'textFormat' },\n                    { field: 'bronze' },\n                    { field: 'total' },\n                ],\n            },\n        ],\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    cellClassRules: {\n        darkGreyBackground: function (params) {\n            return (params.node.rowIndex || 0) % 2 == 0;\n        },\n    },\n    sortable: true,\n    filter: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}"
    },
    {
      "name": "pinnedTopRowData",
      "value": "[\n    {\n        athlete: 'Floating <Top> Athlete',\n        age: 999,\n        country: 'Floating <Top> Country',\n        year: 2020,\n        date: '2020-08-01',\n        sport: 'Track & Field',\n        gold: 22,\n        silver: '003',\n        bronze: 44,\n        total: 55,\n    },\n]"
    },
    {
      "name": "pinnedBottomRowData",
      "value": "[\n    {\n        athlete: 'Floating <Bottom> Athlete',\n        age: 888,\n        country: 'Floating <Bottom> Country',\n        year: 2030,\n        date: '2030-08-01',\n        sport: 'Track & Field',\n        gold: 222,\n        silver: '005',\n        bronze: 244,\n        total: 255,\n    },\n]"
    },
    {
      "name": "excelStyles",
      "value": "[\n    {\n        id: 'cell',\n        alignment: {\n            vertical: 'Center',\n        },\n    },\n    {\n        id: 'header',\n        alignment: {\n            vertical: 'Center',\n        },\n        interior: {\n            color: '#f8f8f8',\n            pattern: 'Solid',\n            patternColor: undefined\n        },\n        borders: {\n            borderBottom: {\n                color: '#babfc7',\n                lineStyle: 'Continuous',\n                weight: 1,\n            },\n        },\n    },\n    {\n        id: 'headerGroup',\n        font: {\n            bold: true,\n        },\n    },\n    {\n        id: 'greenBackground',\n        interior: {\n            color: '#b5e6b5',\n            pattern: 'Solid',\n        },\n    },\n    {\n        id: 'redFont',\n        font: {\n            fontName: 'Calibri Light',\n            underline: 'Single',\n            italic: true,\n            color: '#ff0000',\n        },\n    },\n    {\n        id: 'darkGreyBackground',\n        interior: {\n            color: '#888888',\n            pattern: 'Solid',\n        },\n        font: {\n            fontName: 'Calibri Light',\n            color: '#ffffff',\n        },\n    },\n    {\n        id: 'boldBorders',\n        borders: {\n            borderBottom: {\n                color: '#000000',\n                lineStyle: 'Continuous',\n                weight: 3,\n            },\n            borderLeft: {\n                color: '#000000',\n                lineStyle: 'Continuous',\n                weight: 3,\n            },\n            borderRight: {\n                color: '#000000',\n                lineStyle: 'Continuous',\n                weight: 3,\n            },\n            borderTop: {\n                color: '#000000',\n                lineStyle: 'Continuous',\n                weight: 3,\n            },\n        },\n    },\n    {\n        id: 'dateFormat',\n        dataType: 'DateTime',\n        numberFormat: {\n            format: 'mm/dd/yyyy;@',\n        },\n    },\n    {\n        id: 'twoDecimalPlaces',\n        numberFormat: {\n            format: '#,##0.00',\n        },\n    },\n    {\n        id: 'textFormat',\n        dataType: 'String',\n    },\n]"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    cellClassRules: {\n        darkGreyBackground: function (params) {\n            return (params.node.rowIndex || 0) % 2 == 0;\n        },\n    },\n    sortable: true,\n    filter: true,\n    resizable: true,\n    minWidth: 100,\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Top Level Column Group',\n    children: [{\n        headerName: 'Group A',\n    children: [{\n        field: 'athlete',\n    minWidth: 200 },\n    {\n        field: 'age',\n    cellClass: 'twoDecimalPlaces',\n    cellClassRules : {\n    greenBackground: \"AG_FUNCTION_function (params) {\\n    return params.value < 23;\\n}\",\n    redFont: \"AG_FUNCTION_function (params) {\\n    return params.value < 20;\\n}\"\n } },\n    {\n        field: 'country',\n    minWidth: 200,\n    cellClassRules : { redFont: \"AG_FUNCTION_function (params) {\\n    return params.value === \\'United States\\';\\n}\" } },\n    {\n        headerName: 'Group',\n    valueGetter: 'data.country.charAt(0)',\n    cellClassRules : { boldBorders: \"AG_FUNCTION_function (params) {\\n    return params.value === \\'U\\';\\n}\" },\n    cellClass: ['redFont', 'greenBackground'] },\n    {\n        field: 'year',\n    cellClassRules : { notInExcel: \"AG_FUNCTION_function (params) {\\n    return true;\\n}\" } }] },\n    {\n        headerName: 'Group B',\n    children: [{\n        field: 'date',\n    minWidth: 150,\n    cellClass: 'dateFormat',\n    valueGetter: \"AG_FUNCTION_function (params) {\\n    var val = params.data.date;\\n    if (val.indexOf(\\'/\\') < 0) {\\n        return val;\\n    }\\n    var split = val.split(\\'/\\');\\n    return split[2] + \\'-\\' + split[1] + \\'-\\' + split[0];\\n}\" },\n    {\n        field: 'sport',\n    minWidth: 150 },\n    {\n        field: 'gold',\n    cellClassRules : { boldBorders: \"AG_FUNCTION_function (params) {\\n    return params.value > 2;\\n}\" } },\n    {\n        field: 'silver',\n    cellClass: 'textFormat' },\n    { field: 'bronze' },\n    { field: 'total' }] }] }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtExport",
      "params": "",
      "body": "function onBtExport() {\n    var params = {\n        fontSize: getBooleanValue('#fontSize')\n            ? getNumericValue('#fontSizeValue')\n            : undefined,\n        rowHeight: getBooleanValue('#rowHeight')\n            ? getNumericValue('#rowHeightValue')\n            : undefined,\n        headerRowHeight: getBooleanValue('#headerRowHeight')\n            ? getNumericValue('#headerRowHeightValue')\n            : undefined,\n    };\n    this.gridApi.exportDataAsExcel(params);\n}"
    }
  ],
  "utils": [
    "function getBooleanValue(cssSelector) {\n    return (document.querySelector(cssSelector)).checked === true;\n}",
    "function getTextValue(cssSelector) {\n    return (document.querySelector(cssSelector)).value;\n}",
    "function getNumericValue(cssSelector) {\n    var value = parseFloat(getTextValue(cssSelector));\n    if (isNaN(value)) {\n        var message = 'Invalid number entered in ' + cssSelector + ' field';\n        alert(message);\n        throw new Error(message);\n    }\n    return value;\n}"
  ],
  "callbackDependencies": {
    "getNumericValue": ["parseFloat", "isNaN", "alert"],
    "onBtExport": ["getBooleanValue", "getNumericValue", "gridOptions"]
  },
  "onGridReady": "{\n    (document.getElementById('fontSize')).checked = true;\n    (document.getElementById('rowHeight')).checked = true;\n    (document.getElementById('headerRowHeight')).checked = true;\n}",
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "params.api.setRowData(data)"
  },
  "template": "<div class=\"container\">\n    <div class=\"columns\">\n        <div class=\"option\">\n            <label for=\"fontSize\">\n                <input type=\"checkbox\" id=\"fontSize\">\n                Font Size =\n            </label>\n            <input type=\"text\" id=\"fontSizeValue\" value=\"14\" style=\"width: 40px;\">\n        </div>\n        <div class=\"option\">\n            <label for=\"rowHeight\">\n                <input type=\"checkbox\" id=\"rowHeight\">\n                Row Height =\n            </label>\n            <input type=\"text\" id=\"rowHeightValue\" value=\"30\" style=\"width: 40px;\">\n        </div>\n        <div class=\"option\">\n            <label for=\"headerRowHeight\">\n                <input type=\"checkbox\" id=\"headerRowHeight\">\n                Header Row Height =\n            </label>\n            <input type=\"text\" id=\"headerRowHeightValue\" value=\"30\" style=\"width: 40px;\">\n        </div>\n    </div>\n    <div>\n        <label>\n            <button onclick=\"onBtExport()\" style=\"margin-bottom: 5px; font-weight: bold;\">Export to Excel</button>\n        </label>\n    </div>\n    <div class=\"grid-wrapper\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 815
  }
}
