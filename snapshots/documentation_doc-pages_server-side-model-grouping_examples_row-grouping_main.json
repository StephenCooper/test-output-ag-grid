{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        // demonstrating the use of valueGetters\n        colId: 'country',\n        valueGetter: 'data.country',\n        rowGroup: true,\n        hide: true,\n    },\n    { field: 'sport', rowGroup: true, hide: true },\n    { field: 'year', minWidth: 100 },\n    { field: 'gold', aggFunc: 'sum' },\n    { field: 'silver', aggFunc: 'sum' },\n    { field: 'bronze', aggFunc: 'sum' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 120,\n    resizable: true,\n    sortable: true,\n}"
    },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    flex: 1,\n    minWidth: 280,\n    field: 'athlete',\n}"
    },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    { "name": "cacheBlockSize", "value": "5" },
    { "name": "animateRows", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 120,\n    resizable: true,\n    sortable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        // demonstrating the use of valueGetters\ncolId: 'country',\n    valueGetter: 'data.country',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'sport',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'year',\n    minWidth: 100 },\n    {\n        field: 'gold',\n    aggFunc: 'sum' },\n    {\n        field: 'silver',\n    aggFunc: 'sum' },\n    {\n        field: 'bronze',\n    aggFunc: 'sum' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function getServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            var response = server.getData(params.request);\n            // adding delay to simulate real server call\n            setTimeout(function () {\n                if (response.success) {\n                    // call the success callback\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                }\n                else {\n                    // inform the grid request failed\n                    params.fail();\n                }\n            }, 1000);\n        },\n    };\n}"
  ],
  "callbackDependencies": {
    "getServerSideDatasource": ["params", "setTimeout"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // setup the fake server with entire dataset\n    var fakeServer = new FakeServer(data);\n    // create datasource with a reference to the fake server\n    var datasource = getServerSideDatasource(fakeServer);\n    // register the datasource with the grid\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "exampleHeight": 590,
    "extras": ["alasql"],
    "modules": ["serverside", "rowgrouping"]
  }
}
