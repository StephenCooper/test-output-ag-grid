{
  "eventHandlers": [],
  "properties": [
    { "name": "columnDefs", "value": "getColumnDefs()" },
    { "name": "defaultColDef", "value": "{\n    resizable: true,\n}" },
    { "name": "rowModelType", "value": "'infinite'" },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "maxBlocksInCache", "value": "2" },
    { "name": "suppressRowClickSelection", "value": "true" },
    {
      "name": "getRowNodeId",
      "value": "function (item) {\n    return item.a;\n}"
    },
    { "name": "datasource", "value": "getDataSource(100)" }
  ],
  "components": [],
  "defaultColDef": "{\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "var ALPHABET = 'abcdefghijklmnopqrstuvwxyz'.split('');",
    "function getColumnDefs() {\n    const columnDefs = [\n        { checkboxSelection: true, headerName: '', width: 60 },\n        { headerName: '#', width: 80, valueGetter: 'node.rowIndex' },\n    ];\n    ALPHABET.forEach(function (letter) {\n        columnDefs.push({\n            headerName: letter.toUpperCase(),\n            field: letter,\n            width: 150,\n        });\n    });\n    return columnDefs;\n}",
    "function getDataSource(count) {\n    const dataSource = {\n        rowCount: count,\n        getRows: function (params) {\n            var rowsThisPage = [];\n            for (var rowIndex = params.startRow; rowIndex < params.endRow; rowIndex++) {\n                var record = {};\n                ALPHABET.forEach(function (letter, colIndex) {\n                    var randomNumber = 17 + rowIndex + colIndex;\n                    var cellKey = letter.toUpperCase() + (rowIndex + 1);\n                    record[letter] = cellKey + ' = ' + randomNumber;\n                });\n                rowsThisPage.push(record);\n            }\n            // to mimic server call, we reply after a short delay\n            setTimeout(function () {\n                // no need to pass the second 'rowCount' parameter as we have already provided it\n                params.successCallback(rowsThisPage);\n            }, 100);\n        }\n    };\n    return dataSource;\n}"
  ],
  "callbackDependencies": { "getDataSource": ["params", "setTimeout"] },
  "template": "GRID_TEMPLATE_PLACEHOLDER\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "modules": ["infinite"]
  }
}
