{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { headerName: 'Symbol', field: 'symbol' },\n    { headerName: 'Price', field: 'price' },\n    { headerName: 'Group', field: 'group' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 250,\n    sortable: true,\n    resizable: true,\n}"
    },
    { "name": "immutableData", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "rowSelection", "value": "'multiple'" },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    headerName: 'Symbol',\n    cellRenderer: 'agGroupCellRenderer',\n    field: 'symbol',\n}"
    },
    {
      "name": "statusBar",
      "value": "{\n    statusPanels: [{ statusPanel: 'agAggregationComponent', align: 'right' }],\n}"
    },
    { "name": "groupDefaultExpanded", "value": "1" },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.symbol;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 250,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Symbol',\n    field: 'symbol' },\n    {\n        headerName: 'Price',\n    field: 'price' },\n    {\n        headerName: 'Group',\n    field: 'group' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "addFiveItems",
      "params": "true",
      "body": "function addFiveItems(append) {\n    var newStore = immutableStore.slice();\n    for (var i = 0; i < 5; i++) {\n        var newItem = createItem();\n        if (append) {\n            newStore.push(newItem);\n        }\n        else {\n            newStore.splice(0, 0, newItem);\n        }\n    }\n    immutableStore = newStore;\n    this.gridApi.setRowData(immutableStore);\n}"
    },
    {
      "name": "removeSelected",
      "params": "",
      "body": "function removeSelected() {\n    var selectedRowNodes = this.gridApi.getSelectedNodes();\n    var selectedIds = selectedRowNodes.map(function (rowNode) {\n        return rowNode.id;\n    });\n    immutableStore = immutableStore.filter(function (dataItem) {\n        return selectedIds.indexOf(dataItem.symbol) < 0;\n    });\n    this.gridApi.setRowData(immutableStore);\n}"
    },
    {
      "name": "setSelectedToGroup",
      "params": "'A'",
      "body": "function setSelectedToGroup(newGroup) {\n    var selectedRowNodes = this.gridApi.getSelectedNodes();\n    var selectedIds = selectedRowNodes.map(function (rowNode) {\n        return rowNode.id;\n    });\n    immutableStore = immutableStore.map(function (dataItem) {\n        var itemSelected = selectedIds.indexOf(dataItem.symbol) >= 0;\n        if (itemSelected) {\n            return {\n                // symbol and price stay the same\n                symbol: dataItem.symbol,\n                price: dataItem.price,\n                // group gets the group\n                group: newGroup,\n            };\n        }\n        else {\n            return dataItem;\n        }\n    });\n    this.gridApi.setRowData(immutableStore);\n}"
    },
    {
      "name": "updatePrices",
      "params": "",
      "body": "function updatePrices() {\n    var newStore = [];\n    immutableStore.forEach(function (item) {\n        newStore.push({\n            // use same symbol as last time, this is the unique id\n            symbol: item.symbol,\n            // group also stays the same\n            group: item.group,\n            // add random price\n            price: Math.floor(Math.random() * 100),\n        });\n    });\n    immutableStore = newStore;\n    this.gridApi.setRowData(immutableStore);\n}"
    },
    {
      "name": "onGroupingEnabled",
      "params": "true",
      "body": "function onGroupingEnabled(enabled) {\n    setGroupingEnabled(enabled, this.gridColumnApi);\n}"
    },
    {
      "name": "reverseItems",
      "params": "",
      "body": "function reverseItems() {\n    immutableStore.reverse();\n    this.gridApi.setRowData(immutableStore);\n}"
    }
  ],
  "utils": [
    "function getInitialData() {\n    var data = [];\n    for (var i = 0; i < 5; i++) {\n        data.push(createItem());\n    }\n    return data;\n}",
    "var immutableStore = [];",
    "function filter(list, callback) {\n    var filteredList = [];\n    list.forEach(function (item) {\n        if (callback(item)) {\n            filteredList.push(item);\n        }\n    });\n    return filteredList;\n}",
    "function createItem() {\n    var item = {\n        group: 'A',\n        symbol: createUniqueRandomSymbol(),\n        price: Math.floor(Math.random() * 100),\n    };\n    return item;\n}",
    "function setGroupingEnabled(enabled, columnApi) {\n    if (enabled) {\n        columnApi.applyColumnState({\n            state: [\n                { colId: 'group', rowGroup: true, hide: true },\n                { colId: 'symbol', hide: true },\n            ],\n        });\n    }\n    else {\n        columnApi.applyColumnState({\n            state: [\n                { colId: 'group', rowGroup: false, hide: false },\n                { colId: 'symbol', hide: false },\n            ],\n        });\n    }\n    setItemVisible('groupingOn', !enabled);\n    setItemVisible('groupingOff', enabled);\n}",
    "function setItemVisible(id, visible) {\n    var element = document.querySelector('#' + id);\n    element.style.display = visible ? 'inline' : 'none';\n}",
    "// creates a unique symbol, eg 'ADG' or 'ZJD'\nfunction createUniqueRandomSymbol() {\n    var symbol;\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var isUnique = false;\n    while (!isUnique) {\n        symbol = '';\n        // create symbol\n        for (var i = 0; i < 3; i++) {\n            symbol += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        // check uniqueness\n        isUnique = true;\n        immutableStore.forEach(function (oldItem) {\n            if (oldItem.symbol === symbol) {\n                isUnique = false;\n            }\n        });\n    }\n    return symbol;\n}"
  ],
  "callbackDependencies": {
    "addFiveItems": ["immutableStore", "createItem", "gridOptions"],
    "removeSelected": ["gridOptions", "immutableStore"],
    "setSelectedToGroup": ["gridOptions", "immutableStore"],
    "updatePrices": ["immutableStore", "gridOptions"],
    "createItem": ["createUniqueRandomSymbol", "Math"],
    "onGroupingEnabled": ["setGroupingEnabled"],
    "setGroupingEnabled": ["setItemVisible"],
    "createUniqueRandomSymbol": ["immutableStore"],
    "reverseItems": ["immutableStore", "gridOptions"]
  },
  "onGridReady": "{\n    immutableStore = [];\n    immutableStore = getInitialData();\n    params.api.setRowData(immutableStore);\n    setGroupingEnabled(false, params.columnApi);\n}",
  "template": "<div style=\"height: 100%; width: 100%; display: flex; flex-direction: column;\">\n    <div style=\"margin-bottom: 5px; min-height: 30px;\">\n        <button onclick=\"reverseItems()\">Reverse</button>\n        <button onclick=\"addFiveItems(true)\">Append</button>\n        <button onclick=\"addFiveItems(false)\">Prepend</button>\n        <button onclick=\"removeSelected()\">Remove Selected</button>\n        <button onclick=\"updatePrices()\">Update Prices</button>\n\n        <button id=\"groupingOn\" onclick=\"onGroupingEnabled(true)\">Grouping On</button>\n        <button id=\"groupingOff\" onclick=\"onGroupingEnabled(false)\">Grouping Off</button>\n        <span style=\"border: 1px solid lightgrey; margin-left: 20px; padding: 8px; white-space: nowrap; display: inline-block;\">\n            Group:\n            <button onclick=\"setSelectedToGroup('A')\">A</button>\n            <button onclick=\"setSelectedToGroup('B')\">B</button>\n            <button onclick=\"setSelectedToGroup('C')\">C</button>\n        </span>\n    </div>\n    <div style=\"flex: 1 1 0px;\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 540,
    "modules": ["clientside", "rowgrouping"]
  }
}
