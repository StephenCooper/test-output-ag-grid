{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // this row shows the row index, doesn't use any data from the row\n    {\n        headerName: 'ID',\n        maxWidth: 100,\n        // it is important to have node.id here, so that when the id changes (which happens\n        // when the row is loaded) then the cell is refreshed.\n        valueGetter: 'node.id',\n        cellRenderer: 'loadingRenderer',\n    },\n    { field: 'athlete', minWidth: 150 },\n    { field: 'age' },\n    { field: 'country', minWidth: 150 },\n    { field: 'year' },\n    { field: 'date', minWidth: 150 },\n    { field: 'sport', minWidth: 150 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    resizable: true,\n    minWidth: 100,\n}"
    },
    {
      "name": "components",
      "value": "{\n    loadingRenderer: function (params) {\n        if (params.value !== undefined) {\n            return params.value;\n        }\n        else {\n            return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n        }\n    },\n}"
    },
    { "name": "rowBuffer", "value": "0" },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "rowModelType", "value": "'infinite'" },
    { "name": "cacheBlockSize", "value": "100" },
    { "name": "cacheOverflowSize", "value": "2" },
    { "name": "maxConcurrentDatasourceRequests", "value": "1" },
    { "name": "infiniteInitialRowCount", "value": "1000" },
    { "name": "maxBlocksInCache", "value": "10" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    resizable: true,\n    minWidth: 100,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'ID',\n    maxWidth: 100,\n    // it is important to have node.id here, so that when the id changes (which happens\n// when the row is loaded) then the cell is refreshed.\nvalueGetter: 'node.id',\n    cellRenderer: 'loadingRenderer' },\n    {\n        field: 'athlete',\n    minWidth: 150 },\n    { field: 'age' },\n    {\n        field: 'country',\n    minWidth: 150 },\n    { field: 'year' },\n    {\n        field: 'date',\n    minWidth: 150 },\n    {\n        field: 'sport',\n    minWidth: 150 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n    { field: 'total' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [],
  "callbackDependencies": {},
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    var dataSource = {\n        rowCount: undefined,\n        getRows: function (params) {\n            console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n            // At this point in your code, you would call the server, using $http if in AngularJS 1.x.\n            // To make the demo look real, wait for 500ms before returning\n            setTimeout(function () {\n                // take a slice of the total rows\n                var rowsThisPage = data.slice(params.startRow, params.endRow);\n                // if on or after the last page, work out the last row.\n                var lastRow = -1;\n                if (data.length <= params.endRow) {\n                    lastRow = data.length;\n                }\n                // call the success callback\n                params.successCallback(rowsThisPage, lastRow);\n            }, 500);\n        },\n    };\n    params.api.setDatasource(dataSource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "modules": ["infinite"]
  }
}
