{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'a', suppressCellFlash: true },\n    { field: 'b' },\n    { field: 'c' },\n    { field: 'd' },\n    { field: 'e' },\n    { field: 'f' },\n]"
    },
    { "name": "defaultColDef", "value": "{\n    flex: 1,\n}" },
    { "name": "rowData", "value": "[]" },
    { "name": "pinnedTopRowData", "value": "[]" },
    { "name": "pinnedBottomRowData", "value": "[]" },
    { "name": "enableCellChangeFlash", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'a',\n    suppressCellFlash: true },\n    { field: 'b' },\n    { field: 'c' },\n    { field: 'd' },\n    { field: 'e' },\n    { field: 'f' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "scrambleAndRefreshAll",
      "params": "",
      "body": "function scrambleAndRefreshAll() {\n    scramble();\n    var params = {\n        force: isForceRefreshSelected(),\n        suppressFlash: isSuppressFlashSelected(),\n    };\n    this.gridApi.refreshCells(params);\n}"
    },
    {
      "name": "scrambleAndRefreshLeftToRight",
      "params": "",
      "body": "function scrambleAndRefreshLeftToRight() {\n    scramble();\n    var api = this.gridApi;\n    ['a', 'b', 'c', 'd', 'e', 'f'].forEach(function (col, index) {\n        var millis = index * 100;\n        var params = {\n            force: isForceRefreshSelected(),\n            suppressFlash: isSuppressFlashSelected(),\n            columns: [col],\n        };\n        callRefreshAfterMillis(params, millis, api);\n    });\n}"
    },
    {
      "name": "scrambleAndRefreshTopToBottom",
      "params": "",
      "body": "function scrambleAndRefreshTopToBottom() {\n    scramble();\n    var frame = 0;\n    var i;\n    var rowNode;\n    var api = this.gridApi;\n    for (i = 0; i < api.getPinnedTopRowCount(); i++) {\n        rowNode = api.getPinnedTopRow(i);\n        refreshRow(rowNode, api);\n    }\n    for (i = 0; i < this.gridApi.getDisplayedRowCount(); i++) {\n        rowNode = this.gridApi.getDisplayedRowAtIndex(i);\n        refreshRow(rowNode, api);\n    }\n    for (i = 0; i < this.gridApi.getPinnedBottomRowCount(); i++) {\n        rowNode = this.gridApi.getPinnedBottomRow(i);\n        refreshRow(rowNode, api);\n    }\n    function refreshRow(rowNode, api) {\n        var millis = frame++ * 100;\n        var rowNodes = [rowNode]; // params needs an array\n        var params = {\n            force: isForceRefreshSelected(),\n            suppressFlash: isSuppressFlashSelected(),\n            rowNodes: rowNodes,\n        };\n        callRefreshAfterMillis(params, millis, api);\n    }\n}"
    }
  ],
  "utils": [
    "// placing in 13 rows, so there are exactly enough rows to fill the grid, makes\n// the row animation look nice when you see all the rows\nvar data = [];",
    "var topRowData = [];",
    "var bottomRowData = [];",
    "function createData(count) {\n    var result = [];\n    for (var i = 1; i <= count; i++) {\n        result.push({\n            a: (i * 863) % 100,\n            b: (i * 811) % 100,\n            c: (i * 743) % 100,\n            d: (i * 677) % 100,\n            e: (i * 619) % 100,\n            f: (i * 571) % 100,\n        });\n    }\n    return result;\n}",
    "function isForceRefreshSelected() {\n    return (document.querySelector('#forceRefresh')).checked;\n}",
    "function isSuppressFlashSelected() {\n    return (document.querySelector('#suppressFlash')).checked;\n}",
    "function callRefreshAfterMillis(params, millis, gridApi) {\n    setTimeout(function () {\n        gridApi.refreshCells(params);\n    }, millis);\n}",
    "function scramble() {\n    data.forEach(scrambleItem);\n    topRowData.forEach(scrambleItem);\n    bottomRowData.forEach(scrambleItem);\n}",
    "function scrambleItem(item) {\n    ;\n    ['a', 'b', 'c', 'd', 'e', 'f'].forEach(function (colId) {\n        // skip 50% of the cells so updates are random\n        if (Math.random() > 0.5) {\n            return;\n        }\n        item[colId] = Math.floor(Math.random() * 100);\n    });\n}"
  ],
  "callbackDependencies": {
    "scrambleAndRefreshAll": [
      "scramble",
      "isForceRefreshSelected",
      "isSuppressFlashSelected",
      "gridOptions"
    ],
    "scrambleAndRefreshLeftToRight": [
      "scramble",
      "gridOptions",
      "['a', 'b', 'c', 'd', 'e', 'f']"
    ],
    "scrambleAndRefreshTopToBottom": [
      "scramble",
      "gridOptions",
      "refreshRow",
      "isForceRefreshSelected",
      "isSuppressFlashSelected",
      "callRefreshAfterMillis"
    ],
    "callRefreshAfterMillis": ["setTimeout"],
    "scramble": ["data", "topRowData", "bottomRowData"],
    "scrambleItem": ["['a', 'b', 'c', 'd', 'e', 'f']"]
  },
  "onGridReady": "{\n    // placing in 13 rows, so there are exactly enough rows to fill the grid, makes\n    // the row animation look nice when you see all the rows\n    data = createData(14);\n    topRowData = createData(2);\n    bottomRowData = createData(2);\n    params.api.setRowData(data);\n    params.api.setPinnedTopRowData(topRowData);\n    params.api.setPinnedBottomRowData(bottomRowData);\n}",
  "template": "<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div>\n            <button onclick=\"scrambleAndRefreshAll()\">Scramble &amp; Refresh All</button>\n            <button onclick=\"scrambleAndRefreshLeftToRight()\">Scramble &amp; Refresh Left to Right</button>\n            <button onclick=\"scrambleAndRefreshTopToBottom()\">Scramble &amp; Refresh Top to Bottom</button>\n        </div>\n        <div>\n            <label>\n                <input type=\"checkbox\" id=\"forceRefresh\">\n                Force Refresh\n            </label>\n            <label>\n                <input type=\"checkbox\" id=\"suppressFlash\">\n                Suppress Flash\n            </label>\n        </div>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark"
  }
}
