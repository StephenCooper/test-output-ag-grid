{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        field: 'athlete',\n        filterParams: containsFilterParams,\n    },\n    {\n        field: 'age',\n        minWidth: 120,\n        filter: 'agNumberColumnFilter',\n        filterParams: filterParams,\n    },\n    {\n        field: 'date',\n        filter: 'agDateColumnFilter',\n        filterParams: equalsFilterParams,\n    },\n    {\n        field: 'country',\n        filterParams: notEqualsFilterParams,\n    },\n    { field: 'gold', filter: 'agNumberColumnFilter' },\n    { field: 'silver', filter: 'agNumberColumnFilter' },\n    { field: 'bronze', filter: 'agNumberColumnFilter' },\n    { field: 'total', filter: false },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    filter: true,\n}"
    },
    {
      "name": "localeTextFunc",
      "value": "(key, defaultValue) => {\n    if (key === 'notEqualNoNulls') {\n        return '* Not Equals (No Nulls) *';\n    }\n    return defaultValue;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    filter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'athlete',\n    filterParams: 'AG_LITERAL_containsFilterParams' },\n    {\n        field: 'age',\n    minWidth: 120,\n    filter: 'agNumberColumnFilter',\n    filterParams: 'AG_LITERAL_filterParams' },\n    {\n        field: 'date',\n    filter: 'agDateColumnFilter',\n    filterParams: 'AG_LITERAL_equalsFilterParams' },\n    {\n        field: 'country',\n    filterParams: 'AG_LITERAL_notEqualsFilterParams' },\n    {\n        field: 'gold',\n    filter: 'agNumberColumnFilter' },\n    {\n        field: 'silver',\n    filter: 'agNumberColumnFilter' },\n    {\n        field: 'bronze',\n    filter: 'agNumberColumnFilter' },\n    {\n        field: 'total',\n    filter: false }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "printState",
      "params": "",
      "body": "function printState() {\n    var filterState = this.gridApi.getFilterModel();\n    console.log('filterState: ', filterState);\n}"
    },
    {
      "name": "saveState",
      "params": "",
      "body": "function saveState() {\n    window.filterState = this.gridApi.getFilterModel();\n    console.log('filter state saved');\n}"
    },
    {
      "name": "restoreState",
      "params": "",
      "body": "function restoreState() {\n    this.gridApi.setFilterModel(window.filterState);\n    console.log('filter state restored');\n}"
    },
    {
      "name": "resetState",
      "params": "",
      "body": "function resetState() {\n    this.gridApi.setFilterModel(null);\n    console.log('column state reset');\n}"
    }
  ],
  "utils": [
    "var filterParams = {\n    filterOptions: [\n        'empty',\n        {\n            displayKey: 'evenNumbers',\n            displayName: 'Even Numbers',\n            predicate: (_, cellValue) => cellValue != null && cellValue % 2 === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'oddNumbers',\n            displayName: 'Odd Numbers',\n            predicate: (_, cellValue) => cellValue != null && cellValue % 2 !== 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'blanks',\n            displayName: 'Blanks',\n            predicate: (_, cellValue) => cellValue == null,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'age5YearsAgo',\n            displayName: 'Age 5 Years Ago',\n            predicate: ([fv1], cellValue) => cellValue == null || cellValue - 5 === fv1,\n            numberOfInputs: 1,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2], cellValue) => cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n            numberOfInputs: 2,\n        },\n    ],\n    suppressAndOrCondition: true,\n};",
    "var containsFilterParams = {\n    filterOptions: [\n        'contains',\n        {\n            displayKey: 'startsA',\n            displayName: 'Starts With \"A\"',\n            predicate: (_, cellValue) => cellValue != null && cellValue.indexOf('A') === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'startsN',\n            displayName: 'Starts With \"N\"',\n            predicate: (_, cellValue) => cellValue != null && cellValue.indexOf('N') === 0,\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'regexp',\n            displayName: 'Regular Expression',\n            predicate: ([fv1], cellValue) => cellValue == null || new RegExp(fv1, 'gi').test(cellValue),\n            numberOfInputs: 1,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2], cellValue) => cellValue == null || (fv1 < cellValue && fv2 > cellValue),\n            numberOfInputs: 2,\n        },\n    ],\n};",
    "var equalsFilterParams = {\n    filterOptions: [\n        'equals',\n        {\n            displayKey: 'equalsWithNulls',\n            displayName: 'Equals (with Nulls)',\n            predicate: ([filterValue], cellValue) => {\n                if (cellValue == null)\n                    return true;\n                var parts = cellValue.split('/');\n                var cellDate = new Date(Number(parts[2]), Number(parts[1] - 1), Number(parts[0]));\n                return cellDate.getTime() === filterValue.getTime();\n            },\n        },\n        {\n            displayKey: 'leapYear',\n            displayName: 'Leap Year',\n            predicate: (_, cellValue) => {\n                if (cellValue == null)\n                    return true;\n                const year = Number(cellValue.split('/')[2]);\n                return year % 4 === 0 && year % 200 !== 0;\n            },\n            numberOfInputs: 0,\n        },\n        {\n            displayKey: 'betweenExclusive',\n            displayName: 'Between (Exclusive)',\n            predicate: ([fv1, fv2], cellValue) => {\n                if (cellValue == null)\n                    return true;\n                var parts = cellValue.split('/');\n                var cellDate = new Date(Number(parts[2]), Number(parts[1] - 1), Number(parts[0]));\n                return (cellDate.getTime() > fv1.getTime() &&\n                    cellDate.getTime() < fv2.getTime());\n            },\n            numberOfInputs: 2,\n        },\n    ],\n    comparator: function (filterLocalDateAtMidnight, cellValue) {\n        var dateAsString = cellValue;\n        if (dateAsString == null)\n            return -1;\n        var dateParts = dateAsString.split('/');\n        var cellDate = new Date(Number(dateParts[2]), Number(dateParts[1]) - 1, Number(dateParts[0]));\n        if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n            return 0;\n        }\n        if (cellDate < filterLocalDateAtMidnight) {\n            return -1;\n        }\n        if (cellDate > filterLocalDateAtMidnight) {\n            return 1;\n        }\n    },\n    browserDatePicker: true,\n};",
    "var notEqualsFilterParams = {\n    filterOptions: [\n        'notEqual',\n        {\n            displayKey: 'notEqualNoNulls',\n            displayName: 'Not Equals without Nulls',\n            predicate: ([filterValue], cellValue) => {\n                if (cellValue == null)\n                    return false;\n                return cellValue.toLowerCase() !== filterValue.toLowerCase();\n            },\n        },\n    ],\n};"
  ],
  "callbackDependencies": {
    "printState": ["gridOptions"],
    "saveState": ["window", "gridOptions"],
    "restoreState": ["gridOptions"],
    "resetState": ["gridOptions"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/small-olympic-winners.json'",
    "callback": "{\n    params.api.setRowData(data);\n}"
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"printState()\">Print State</button>\n        <button onclick=\"saveState()\">Save State</button>\n        <button onclick=\"restoreState()\">Restore State</button>\n        <button onclick=\"resetState()\">Reset State</button>\n    </div>\n    \n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
