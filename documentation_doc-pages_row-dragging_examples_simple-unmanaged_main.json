{
  "eventHandlers": [
    {
      "name": "sortChanged",
      "handlerName": "onSortChanged",
      "handler": "// listen for change on sort changed\nfunction onSortChanged() {\n    var colState = this.gridColumnApi.getColumnState() || [];\n    sortActive = colState.some(c => c.sort);\n    // suppress row drag if either sort or filter is active\n    var suppressRowDrag = sortActive || filterActive;\n    console.log('sortActive = ' +\n        sortActive +\n        ', filterActive = ' +\n        filterActive +\n        ', allowRowDrag = ' +\n        suppressRowDrag);\n    this.gridApi.setSuppressRowDrag(suppressRowDrag);\n}"
    },
    {
      "name": "filterChanged",
      "handlerName": "onFilterChanged",
      "handler": "// listen for changes on filter changed\nfunction onFilterChanged() {\n    filterActive = this.gridApi.isAnyFilterPresent();\n    // suppress row drag if either sort or filter is active\n    var suppressRowDrag = sortActive || filterActive;\n    console.log('sortActive = ' +\n        sortActive +\n        ', filterActive = ' +\n        filterActive +\n        ', allowRowDrag = ' +\n        suppressRowDrag);\n    this.gridApi.setSuppressRowDrag(suppressRowDrag);\n}"
    },
    {
      "name": "rowDragMove",
      "handlerName": "onRowDragMove",
      "handler": "function onRowDragMove(event) {\n    var movingNode = event.node;\n    var overNode = event.overNode;\n    var rowNeedsToMove = movingNode !== overNode;\n    if (rowNeedsToMove) {\n        // the list of rows we have is data, not row nodes, so extract the data\n        var movingData = movingNode.data;\n        var overData = overNode.data;\n        var fromIndex = immutableStore.indexOf(movingData);\n        var toIndex = immutableStore.indexOf(overData);\n        var newStore = immutableStore.slice();\n        moveInArray(newStore, fromIndex, toIndex);\n        immutableStore = newStore;\n        this.gridApi.setRowData(newStore);\n        this.gridApi.clearFocusedCell();\n    }\n    function moveInArray(arr, fromIndex, toIndex) {\n        var element = arr[fromIndex];\n        arr.splice(fromIndex, 1);\n        arr.splice(toIndex, 0, element);\n    }\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'athlete', rowDrag: true },\n    { field: 'country' },\n    { field: 'year', width: 100 },\n    { field: 'date' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 170,\n    sortable: true,\n    filter: true,\n}"
    },
    { "name": "immutableData", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "getRowNodeId", "value": null }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 170,\n    sortable: true,\n    filter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'athlete',\n    rowDrag: true },\n    { field: 'country' },\n    {\n        field: 'year',\n    width: 100 },\n    { field: 'date' },\n    { field: 'sport' },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' }]",
  "instanceMethods": ["function getRowNodeId(data) {\n    return data.id;\n}"],
  "externalEventHandlers": [],
  "utils": [
    "var immutableStore = getData();",
    "var sortActive = false;",
    "var filterActive = false;"
  ],
  "callbackDependencies": {
    "onSortChanged": ["gridOptions", "sortActive", "filterActive"],
    "onFilterChanged": ["filterActive", "gridOptions", "sortActive"],
    "onRowDragMove": ["immutableStore", "moveInArray", "gridOptions", "arr"]
  },
  "onGridReady": "{\n    // add id to each item, needed for immutable store to work\n    immutableStore.forEach(function (data, index) {\n        data.id = index;\n    });\n    params.api.setRowData(immutableStore);\n}",
  "template": "GRID_TEMPLATE_PLACEHOLDER\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
