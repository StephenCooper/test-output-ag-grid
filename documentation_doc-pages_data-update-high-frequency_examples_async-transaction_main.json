{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // these are the row groups, so they are all hidden (they are show in the group column)\n    {\n        headerName: 'Product',\n        field: 'product',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 0,\n        hide: true,\n    },\n    {\n        headerName: 'Portfolio',\n        field: 'portfolio',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 1,\n        hide: true,\n    },\n    {\n        headerName: 'Book',\n        field: 'book',\n        enableRowGroup: true,\n        enablePivot: true,\n        rowGroupIndex: 2,\n        hide: true,\n    },\n    { headerName: 'Trade', field: 'trade', width: 100 },\n    // all the other columns (visible and not grouped)\n    {\n        field: 'current',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'previous',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'dealType',\n        enableRowGroup: true,\n        enablePivot: true,\n    },\n    {\n        headerName: 'Bid',\n        field: 'bidFlag',\n        enableRowGroup: true,\n        enablePivot: true,\n        width: 100,\n    },\n    {\n        headerName: 'PL 1',\n        field: 'pl1',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'PL 2',\n        field: 'pl2',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'Gain-DX',\n        field: 'gainDx',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: 'SX / PX',\n        field: 'sxPx',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        headerName: '99 Out',\n        field: '_99Out',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'submitterID',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n    {\n        field: 'submitterDealID',\n        width: 200,\n        aggFunc: 'sum',\n        enableValue: true,\n        cellClass: 'number',\n        valueFormatter: numberCellFormatter,\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n    },\n]"
    },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "rowGroupPanelShow", "value": "'always'" },
    { "name": "pivotPanelShow", "value": "'always'" },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.trade;\n}"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    width: 120,\n    sortable: true,\n    resizable: true,\n}"
    },
    { "name": "autoGroupColumnDef", "value": "{\n    width: 250,\n}" }
  ],
  "components": [],
  "defaultColDef": "{\n    width: 120,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Product',\n    field: 'product',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 0,\n    hide: true },\n    {\n        headerName: 'Portfolio',\n    field: 'portfolio',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 1,\n    hide: true },\n    {\n        headerName: 'Book',\n    field: 'book',\n    enableRowGroup: true,\n    enablePivot: true,\n    rowGroupIndex: 2,\n    hide: true },\n    {\n        headerName: 'Trade',\n    field: 'trade',\n    width: 100 },\n    {\n        field: 'current',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'previous',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'dealType',\n    enableRowGroup: true,\n    enablePivot: true },\n    {\n        headerName: 'Bid',\n    field: 'bidFlag',\n    enableRowGroup: true,\n    enablePivot: true,\n    width: 100 },\n    {\n        headerName: 'PL 1',\n    field: 'pl1',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'PL 2',\n    field: 'pl2',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'Gain-DX',\n    field: 'gainDx',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: 'SX / PX',\n    field: 'sxPx',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        headerName: '99 Out',\n    field: '_99Out',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'submitterID',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' },\n    {\n        field: 'submitterDealID',\n    width: 200,\n    aggFunc: 'sum',\n    enableValue: true,\n    cellClass: 'number',\n    valueFormatter: 'AG_LITERAL_numberCellFormatter',\n    cellRenderer: 'agAnimateShowChangeCellRenderer' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onNormalUpdate",
      "params": "",
      "body": "function onNormalUpdate() {\n    var startMillis = new Date().getTime();\n    setMessage('Running Transaction');\n    var api = this.gridApi;\n    for (var i = 0; i < UPDATE_COUNT; i++) {\n        setTimeout(function () {\n            // pick one index at random\n            var index = Math.floor(Math.random() * globalRowData.length);\n            var itemToUpdate = globalRowData[index];\n            var newItem = copyObject(itemToUpdate);\n            // copy previous to current value\n            newItem.previous = newItem.current;\n            // then create new current value\n            newItem.current = Math.floor(Math.random() * 100000) + 100;\n            // do normal update. update is done before method returns\n            api.applyTransaction({ update: [newItem] });\n        }, 0);\n    }\n    // print message in next VM turn to allow browser to refresh first.\n    // we assume the browser executes the timeouts in order they are created,\n    // so this timeout executes after all the update timeouts created above.\n    setTimeout(function () {\n        var endMillis = new Date().getTime();\n        var duration = endMillis - startMillis;\n        setMessage('Transaction took ' + duration.toLocaleString() + 'ms');\n    }, 0);\n    function setMessage(msg) {\n        var eMessage = document.querySelector('#eMessage');\n        eMessage.innerHTML = msg;\n    }\n}"
    },
    {
      "name": "onAsyncUpdate",
      "params": "",
      "body": "function onAsyncUpdate() {\n    var startMillis = new Date().getTime();\n    setMessage('Running Async');\n    var updatedCount = 0;\n    var api = this.gridApi;\n    for (var i = 0; i < UPDATE_COUNT; i++) {\n        setTimeout(function () {\n            // pick one index at random\n            var index = Math.floor(Math.random() * globalRowData.length);\n            var itemToUpdate = globalRowData[index];\n            var newItem = copyObject(itemToUpdate);\n            // copy previous to current value\n            newItem.previous = newItem.current;\n            // then create new current value\n            newItem.current = Math.floor(Math.random() * 100000) + 100;\n            // update using async method. passing the callback is\n            // optional, we are doing it here so we know when the update\n            // was processed by the grid.\n            api.applyTransactionAsync({ update: [newItem] }, resultCallback);\n        }, 0);\n    }\n    function resultCallback() {\n        updatedCount++;\n        if (updatedCount === UPDATE_COUNT) {\n            // print message in next VM turn to allow browser to refresh\n            setTimeout(function () {\n                var endMillis = new Date().getTime();\n                var duration = endMillis - startMillis;\n                setMessage('Async took ' + duration.toLocaleString() + 'ms');\n            }, 0);\n        }\n    }\n    function setMessage(msg) {\n        var eMessage = document.querySelector('#eMessage');\n        eMessage.innerHTML = msg;\n    }\n}"
    }
  ],
  "utils": [
    "// defined and updated in data.js\nvar UPDATE_COUNT = 200;",
    "function numberCellFormatter(params) {\n    return Math.floor(params.value)\n        .toString()\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
    "// makes a copy of the original and merges in the new values\nfunction copyObject(object) {\n    // start with new object\n    var newObject = {};\n    // copy in the old values\n    Object.keys(object).forEach(function (key) {\n        newObject[key] = object[key];\n    });\n    return newObject;\n}"
  ],
  "callbackDependencies": {
    "numberCellFormatter": ["Math"],
    "onNormalUpdate": [
      "Date",
      "setMessage",
      "gridOptions",
      "setTimeout",
      "msg"
    ],
    "onAsyncUpdate": [
      "Date",
      "setMessage",
      "gridOptions",
      "setTimeout",
      "resultCallback",
      "msg"
    ],
    "copyObject": ["Object"]
  },
  "onGridReady": "{\n    getData();\n    params.api.setRowData(globalRowData);\n}",
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onNormalUpdate()\">Normal Update</button>\n        <button onclick=\"onAsyncUpdate()\">Async Update</button>\n        <span id=\"eMessage\"></span>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 590,
    "modules": ["clientside", "rowgrouping"]
  }
}
