{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'id', maxWidth: 80 },\n    { field: 'athlete', minWidth: 220 },\n    { field: 'country', minWidth: 200 },\n    { field: 'year' },\n    { field: 'sport', minWidth: 200 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 100,\n    resizable: true,\n}"
    },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "blockLoadDebounceMillis", "value": "1000" },
    { "name": "debug", "value": "true" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 100,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'id',\n    maxWidth: 80 },\n    {\n        field: 'athlete',\n    minWidth: 220 },\n    {\n        field: 'country',\n    minWidth: 200 },\n    { field: 'year' },\n    {\n        field: 'sport',\n    minWidth: 200 },\n    { field: 'gold' },\n    { field: 'silver' },\n    { field: 'bronze' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function createServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            // get data for request from our fake server\n            var response = server.getData(params.request);\n            // simulating real server call with a 500ms delay\n            setTimeout(function () {\n                if (response.success) {\n                    // supply rows for requested block to grid\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                }\n                else {\n                    params.fail();\n                }\n            }, 100);\n        },\n    };\n}",
    "function createFakeServer(allData) {\n    return {\n        getData: function (request) {\n            // take a slice of the total rows for requested block\n            var rowsForBlock = allData.slice(request.startRow, request.endRow);\n            // when row count is known and 'blockLoadDebounceMillis' is set it is possible to\n            // quickly skip over blocks while scrolling\n            var lastRow = allData.length;\n            return {\n                success: true,\n                rows: rowsForBlock,\n                lastRow: lastRow,\n            };\n        },\n    };\n}"
  ],
  "callbackDependencies": {
    "createServerSideDatasource": ["params", "setTimeout"],
    "createFakeServer": ["request"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // adding row id to data\n    var idSequence = 0;\n    data.forEach(function (item) {\n        item.id = idSequence++;\n    });\n    // setup the fake server with entire dataset\n    var fakeServer = createFakeServer(data);\n    // create datasource with a reference to the fake server\n    var datasource = createServerSideDatasource(fakeServer);\n    // register the datasource with the grid\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "modules": ["serverside", "menu", "columnpanel"]
  }
}
