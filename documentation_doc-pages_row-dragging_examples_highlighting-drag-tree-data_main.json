{
  "eventHandlers": [
    {
      "name": "rowDragMove",
      "handlerName": "onRowDragMove",
      "handler": "function onRowDragMove(event) {\n    setPotentialParentForNode(event.api, event.overNode);\n}"
    },
    {
      "name": "rowDragLeave",
      "handlerName": "onRowDragLeave",
      "handler": "function onRowDragLeave(event) {\n    // clear node to highlight\n    setPotentialParentForNode(event.api, null);\n}"
    },
    {
      "name": "rowDragEnd",
      "handlerName": "onRowDragEnd",
      "handler": "function onRowDragEnd(event) {\n    if (!potentialParent) {\n        return;\n    }\n    var movingData = event.node.data;\n    // take new parent path from parent, if data is missing, means it's the root node,\n    // which has no data.\n    var newParentPath = potentialParent.data ? potentialParent.data.filePath : [];\n    var needToChangeParent = !arePathsEqual(newParentPath, movingData.filePath);\n    // check we are not moving a folder into a child folder\n    var invalidMode = isSelectionParentOfTarget(event.node, potentialParent);\n    if (invalidMode) {\n        console.log('invalid move');\n    }\n    if (needToChangeParent && !invalidMode) {\n        var updatedRows = [];\n        moveToPath(newParentPath, event.node, updatedRows);\n        this.gridApi.applyTransaction({\n            update: updatedRows,\n        });\n        this.gridApi.clearFocusedCell();\n    }\n    // clear node to highlight\n    setPotentialParentForNode(event.api, null);\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        field: 'dateModified',\n        cellClassRules: cellClassRules,\n    },\n    {\n        field: 'size',\n        valueFormatter: valueFormatter,\n        cellClassRules: cellClassRules,\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    resizable: true,\n}"
    },
    {
      "name": "components",
      "value": "{\n    fileCellRenderer: getFileCellRenderer(),\n}"
    },
    { "name": "rowData", "value": "getData()" },
    { "name": "treeData", "value": "true" },
    { "name": "animateRows", "value": "true" },
    { "name": "groupDefaultExpanded", "value": "-1" },
    {
      "name": "getDataPath",
      "value": "function (data) {\n    return data.filePath;\n}"
    },
    {
      "name": "getRowNodeId",
      "value": "function (data) {\n    return data.id;\n}"
    },
    {
      "name": "autoGroupColumnDef",
      "value": "{\n    rowDrag: true,\n    headerName: 'Files',\n    minWidth: 300,\n    cellRendererParams: {\n        suppressCount: true,\n        innerRenderer: 'fileCellRenderer',\n    },\n    cellClassRules: {\n        'hover-over': function (params) {\n            return params.node === potentialParent;\n        },\n    },\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'dateModified',\n    cellClassRules: 'AG_LITERAL_cellClassRules' },\n    {\n        field: 'size',\n    valueFormatter: 'AG_LITERAL_valueFormatter',\n    cellClassRules: 'AG_LITERAL_cellClassRules' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "var valueFormatter = function (params) {\n    return params.value ? params.value + ' MB' : '';\n};",
    "var cellClassRules = {\n    'hover-over': function (params) {\n        return params.node === potentialParent;\n    },\n};",
    "var potentialParent = null;",
    "function moveToPath(newParentPath, node, allUpdatedNodes) {\n    // last part of the file path is the file name\n    var oldPath = node.data.filePath;\n    var fileName = oldPath[oldPath.length - 1];\n    var newChildPath = newParentPath.slice();\n    newChildPath.push(fileName);\n    node.data.filePath = newChildPath;\n    allUpdatedNodes.push(node.data);\n    if (node.childrenAfterGroup) {\n        node.childrenAfterGroup.forEach(function (childNode) {\n            moveToPath(newChildPath, childNode, allUpdatedNodes);\n        });\n    }\n}",
    "function isSelectionParentOfTarget(selectedNode, targetNode) {\n    var children = selectedNode.childrenAfterGroup || [];\n    for (var i = 0; i < children.length; i++) {\n        if (targetNode && children[i].key === targetNode.key)\n            return true;\n        isSelectionParentOfTarget(children[i], targetNode);\n    }\n    return false;\n}",
    "function arePathsEqual(path1, path2) {\n    if (path1.length !== path2.length) {\n        return false;\n    }\n    var equal = true;\n    path1.forEach(function (item, index) {\n        if (path2[index] !== item) {\n            equal = false;\n        }\n    });\n    return equal;\n}",
    "function setPotentialParentForNode(api, overNode) {\n    var newPotentialParent;\n    if (overNode) {\n        newPotentialParent =\n            overNode.data.type === 'folder'\n                ? // if over a folder, we take the immediate row\n                    overNode\n                : // if over a file, we take the parent row (which will be a folder)\n                    overNode.parent;\n    }\n    else {\n        newPotentialParent = null;\n    }\n    var alreadySelected = potentialParent === newPotentialParent;\n    if (alreadySelected) {\n        return;\n    }\n    // we refresh the previous selection (if it exists) to clear\n    // the highlighted and then the new selection.\n    var rowsToRefresh = [];\n    if (potentialParent) {\n        rowsToRefresh.push(potentialParent);\n    }\n    if (newPotentialParent) {\n        rowsToRefresh.push(newPotentialParent);\n    }\n    potentialParent = newPotentialParent;\n    refreshRows(api, rowsToRefresh);\n}",
    "function refreshRows(api, rowsToRefresh) {\n    var params = {\n        // refresh these rows only.\n        rowNodes: rowsToRefresh,\n        // because the grid does change detection, the refresh\n        // will not happen because the underlying value has not\n        // changed. to get around this, we force the refresh,\n        // which skips change detection.\n        force: true,\n    };\n    api.refreshCells(params);\n}"
  ],
  "callbackDependencies": {
    "onRowDragMove": ["setPotentialParentForNode"],
    "onRowDragLeave": ["setPotentialParentForNode"],
    "onRowDragEnd": [
      "potentialParent",
      "arePathsEqual",
      "isSelectionParentOfTarget",
      "moveToPath",
      "gridOptions",
      "setPotentialParentForNode"
    ],
    "isSelectionParentOfTarget": ["isSelectionParentOfTarget"],
    "setPotentialParentForNode": ["potentialParent", "refreshRows"]
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "extras": ["fontawesome"],
    "modules": ["clientside", "rowgrouping"]
  }
}
