{
  "eventHandlers": [],
  "properties": [
    { "name": "rowData", "value": "getData()" },
    {
      "name": "columnDefs",
      "value": "[\n    { headerName: 'Employee', field: 'employee' },\n    { headerName: 'Number Sick Days', field: 'sickDays', editable: true },\n]"
    },
    {
      "name": "rowClassRules",
      "value": "{\n    // row style function\n    'sick-days-warning': function (params) {\n        var numSickDays = params.data.sickDays;\n        return numSickDays > 5 && numSickDays <= 7;\n    },\n    // row style expression\n    'sick-days-breach': 'data.sickDays >= 8',\n}"
    }
  ],
  "components": [],
  "defaultColDef": null,
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Employee',\n    field: 'employee' },\n    {\n        headerName: 'Number Sick Days',\n    field: 'sickDays',\n    editable: true }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "setDataValue",
      "params": "",
      "body": "function setDataValue() {\n    this.gridApi.forEachNode(function (rowNode) {\n        rowNode.setDataValue('sickDays', randomInt());\n    });\n}"
    },
    {
      "name": "setData",
      "params": "",
      "body": "function setData() {\n    this.gridApi.forEachNode(function (rowNode) {\n        var newData = {\n            employee: rowNode.data.employee,\n            sickDays: randomInt(),\n        };\n        rowNode.setData(newData);\n    });\n}"
    },
    {
      "name": "applyTransaction",
      "params": "",
      "body": "function applyTransaction() {\n    var itemsToUpdate = [];\n    this.gridApi.forEachNode(function (rowNode) {\n        var data = rowNode.data;\n        data.sickDays = randomInt();\n        itemsToUpdate.push(data);\n    });\n    this.gridApi.applyTransaction({ update: itemsToUpdate });\n}"
    }
  ],
  "utils": [
    "function randomInt() {\n    return Math.floor(Math.random() * 10);\n}"
  ],
  "callbackDependencies": {
    "setDataValue": ["gridOptions"],
    "setData": ["gridOptions"],
    "applyTransaction": ["gridOptions"],
    "randomInt": ["Math"]
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"setDataValue()\">rowNode.setDataValue</button>\n        <button onclick=\"setData()\">rowNode.setData</button>\n        <button onclick=\"applyTransaction()\">api.applyTransaction</button>\n    </div>\n\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine"
  }
}
