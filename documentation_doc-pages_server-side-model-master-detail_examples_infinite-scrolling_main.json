{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // group cell renderer needed for expand / collapse icons\n    { field: 'accountId', cellRenderer: 'agGroupCellRenderer' },\n    { field: 'name' },\n    { field: 'country' },\n    { field: 'calls' },\n    { field: 'totalDuration' },\n]"
    },
    { "name": "defaultColDef", "value": "{\n    flex: 1,\n}" },
    { "name": "animateRows", "value": "true" },
    { "name": "rowModelType", "value": "'serverSide'" },
    { "name": "serverSideStoreType", "value": "'partial'" },
    { "name": "masterDetail", "value": "true" },
    {
      "name": "detailCellRendererParams",
      "value": "{\n    detailGridOptions: {\n        columnDefs: [\n            { field: 'callId' },\n            { field: 'direction' },\n            { field: 'duration', valueFormatter: \"x.toLocaleString() + 's'\" },\n            { field: 'switchCode', minWidth: 150 },\n            { field: 'number', minWidth: 180 },\n        ],\n        defaultColDef: {\n            flex: 1,\n        },\n    },\n    getDetailRowData: function (params) {\n        // supply details records to detail cell renderer (i.e. detail grid)\n        params.successCallback(params.data.callRecords);\n    },\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'accountId',\n    cellRenderer: 'agGroupCellRenderer' },\n    { field: 'name' },\n    { field: 'country' },\n    { field: 'calls' },\n    { field: 'totalDuration' }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "function getServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            // adding delay to simulate real server call\n            setTimeout(function () {\n                var response = server.getResponse(params.request);\n                if (response.success) {\n                    // call the success callback\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                }\n                else {\n                    // inform the grid request failed\n                    params.fail();\n                }\n            }, 500);\n        },\n    };\n}",
    "function getFakeServer(allData) {\n    return {\n        getResponse: function (request) {\n            console.log('asking for rows: ' + request.startRow + ' to ' + request.endRow);\n            // take a slice of the total rows\n            var rowsThisPage = allData.slice(request.startRow, request.endRow);\n            // if row count is known, it's possible to skip over blocks\n            var lastRow = allData.length;\n            return {\n                success: true,\n                rows: rowsThisPage,\n                lastRow: lastRow,\n            };\n        },\n    };\n}"
  ],
  "callbackDependencies": {
    "getServerSideDatasource": ["params", "setTimeout"],
    "getFakeServer": ["request"]
  },
  "onGridReady": "{\n    setTimeout(function () {\n        // expand some master row\n        var someRow = params.api.getRowNode('1');\n        if (someRow) {\n            someRow.setExpanded(true);\n        }\n    }, 1000);\n}",
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/call-data.json'",
    "callback": "{\n    var server = getFakeServer(data);\n    var datasource = getServerSideDatasource(server);\n    params.api.setServerSideDatasource(datasource);\n}"
  },
  "template": "<div style=\"height: 100%; box-sizing: border-box;\">\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "exampleHeight": 590,
    "extras": ["lodash"],
    "modules": [
      "serverside",
      "clientside",
      "masterdetail",
      "menu",
      "columnpanel"
    ]
  }
}
