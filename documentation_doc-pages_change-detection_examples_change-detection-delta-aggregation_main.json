{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    { field: 'topGroup', rowGroup: true, hide: true },\n    { field: 'group', rowGroup: true, hide: true },\n    { headerName: 'ID', field: 'id', cellClass: 'number-cell', maxWidth: 70 },\n    { field: 'a', type: 'valueColumn' },\n    { field: 'b', type: 'valueColumn' },\n    { field: 'c', type: 'valueColumn' },\n    { field: 'd', type: 'valueColumn' },\n    {\n        headerName: 'Total',\n        type: 'totalColumn',\n        minWidth: 120,\n        // we use getValue() instead of data.a so that it gets the aggregated values at the group level\n        valueGetter: 'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")',\n    },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    sortable: true,\n    resizable: true,\n}"
    },
    { "name": "autoGroupColumnDef", "value": "{\n    minWidth: 180,\n}" },
    {
      "name": "columnTypes",
      "value": "{\n    valueColumn: {\n        editable: true,\n        aggFunc: 'sum',\n        cellClass: 'number-cell',\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n        filter: 'agNumberColumnFilter',\n        valueParser: numberValueParser,\n    },\n    totalColumn: {\n        cellRenderer: 'agAnimateShowChangeCellRenderer',\n        cellClass: 'number-cell',\n    },\n}"
    },
    { "name": "aggregateOnlyChangedColumns", "value": "true" },
    {
      "name": "aggFuncs",
      "value": "{\n    sum: function (params) {\n        var values = params && params.values ? params.values : [];\n        var result = 0;\n        if (values) {\n            values.forEach(function (value) {\n                if (typeof value === 'number') {\n                    result += value;\n                }\n            });\n        }\n        callCount++;\n        console.log(callCount + ' aggregation: sum([' + values.join(',') + ']) = ' + result);\n        return result;\n    },\n}"
    },
    { "name": "groupDefaultExpanded", "value": "1" },
    { "name": "suppressAggFuncInHeader", "value": "true" },
    { "name": "animateRows", "value": "true" },
    {
      "name": "getRowNodeId",
      "value": "function (rowData) {\n    return rowData.id;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    sortable: true,\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'topGroup',\n    rowGroup: true,\n    hide: true },\n    {\n        field: 'group',\n    rowGroup: true,\n    hide: true },\n    {\n        headerName: 'ID',\n    field: 'id',\n    cellClass: 'number-cell',\n    maxWidth: 70 },\n    {\n        field: 'a',\n    type: 'valueColumn' },\n    {\n        field: 'b',\n    type: 'valueColumn' },\n    {\n        field: 'c',\n    type: 'valueColumn' },\n    {\n        field: 'd',\n    type: 'valueColumn' },\n    {\n        headerName: 'Total',\n    type: 'totalColumn',\n    minWidth: 120,\n    // we use getValue() instead of data.a so that it gets the aggregated values at the group level\nvalueGetter: 'getValue(\"a\") + getValue(\"b\") + getValue(\"c\") + getValue(\"d\")' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "updateOneRecord",
      "params": "",
      "body": "function updateOneRecord() {\n    var rowNodeToUpdate = pickExistingRowNodeAtRandom(this.gridApi);\n    if (!rowNodeToUpdate)\n        return;\n    var randomValue = createRandomNumber();\n    var randomColumnId = pickRandomColumn();\n    console.log('updating ' + randomColumnId + ' to ' + randomValue + ' on ', rowNodeToUpdate.data);\n    rowNodeToUpdate.setDataValue(randomColumnId, randomValue);\n}"
    },
    {
      "name": "updateUsingTransaction",
      "params": "",
      "body": "function updateUsingTransaction() {\n    var itemToUpdate = pickExistingRowItemAtRandom(this.gridApi);\n    if (!itemToUpdate) {\n        return;\n    }\n    console.log('updating - before', itemToUpdate);\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n    itemToUpdate[pickRandomColumn()] = createRandomNumber();\n    var transaction = {\n        update: [itemToUpdate],\n    };\n    console.log('updating - after', itemToUpdate);\n    this.gridApi.applyTransaction(transaction);\n}"
    },
    {
      "name": "removeUsingTransaction",
      "params": "",
      "body": "function removeUsingTransaction() {\n    var itemToRemove = pickExistingRowItemAtRandom(this.gridApi);\n    if (!itemToRemove) {\n        return;\n    }\n    var transaction = {\n        remove: [itemToRemove],\n    };\n    console.log('removing', itemToRemove);\n    this.gridApi.applyTransaction(transaction);\n}"
    },
    {
      "name": "addUsingTransaction",
      "params": "",
      "body": "function addUsingTransaction() {\n    var i = Math.floor(Math.random() * 2);\n    var j = Math.floor(Math.random() * 5);\n    var k = Math.floor(Math.random() * 3);\n    var newItem = createRowItem(i, j, k);\n    var transaction = {\n        add: [newItem],\n    };\n    console.log('adding', newItem);\n    this.gridApi.applyTransaction(transaction);\n}"
    },
    {
      "name": "changeGroupUsingTransaction",
      "params": "",
      "body": "function changeGroupUsingTransaction() {\n    var itemToUpdate = pickExistingRowItemAtRandom(this.gridApi);\n    if (!itemToUpdate) {\n        return;\n    }\n    itemToUpdate.topGroup = itemToUpdate.topGroup === 'Top' ? 'Bottom' : 'Top';\n    var transaction = {\n        update: [itemToUpdate],\n    };\n    console.log('updating', itemToUpdate);\n    this.gridApi.applyTransaction(transaction);\n}"
    }
  ],
  "utils": [
    "var rowIdCounter = 0;",
    "var callCount = 0;",
    "function createRowData() {\n    var result = [];\n    for (var i = 1; i <= 2; i++) {\n        for (var j = 1; j <= 5; j++) {\n            for (var k = 1; k <= 3; k++) {\n                var rowDataItem = createRowItem(i, j, k);\n                result.push(rowDataItem);\n            }\n        }\n    }\n    return result;\n}",
    "function createRowItem(i, j, k) {\n    var rowDataItem = {\n        id: rowIdCounter++,\n        a: (j * k * 863) % 100,\n        b: (j * k * 811) % 100,\n        c: (j * k * 743) % 100,\n        d: (j * k * 677) % 100,\n        topGroup: 'Bottom',\n        group: 'Group B' + j\n    };\n    if (i === 1) {\n        rowDataItem.topGroup = 'Top';\n        rowDataItem.group = 'Group A' + j;\n    }\n    return rowDataItem;\n}",
    "// converts strings to numbers\nfunction numberValueParser(params) {\n    console.log('=> updating to ' + params.newValue);\n    return Number(params.newValue);\n}",
    "function pickRandomColumn() {\n    var letters = ['a', 'b', 'c', 'd'];\n    var randomIndex = Math.floor(Math.random() * letters.length);\n    return letters[randomIndex];\n}",
    "function createRandomNumber() {\n    return Math.floor(Math.random() * 100);\n}",
    "function pickExistingRowItemAtRandom(gridApi) {\n    var rowNode = pickExistingRowNodeAtRandom(gridApi);\n    return rowNode ? rowNode.data : null;\n}",
    "function pickExistingRowNodeAtRandom(gridApi) {\n    var allItems = [];\n    gridApi.forEachLeafNode(function (rowNode) {\n        allItems.push(rowNode);\n    });\n    if (allItems.length === 0) {\n        return undefined;\n    }\n    var result = allItems[Math.floor(Math.random() * allItems.length)];\n    return result;\n}"
  ],
  "callbackDependencies": {
    "createRowData": ["createRowItem"],
    "createRowItem": ["rowIdCounter"],
    "numberValueParser": ["Number"],
    "updateOneRecord": [
      "pickExistingRowNodeAtRandom",
      "createRandomNumber",
      "pickRandomColumn"
    ],
    "pickRandomColumn": ["Math"],
    "createRandomNumber": ["Math"],
    "pickExistingRowItemAtRandom": ["pickExistingRowNodeAtRandom"],
    "updateUsingTransaction": [
      "pickExistingRowItemAtRandom",
      "pickRandomColumn",
      "createRandomNumber",
      "gridOptions"
    ],
    "removeUsingTransaction": ["pickExistingRowItemAtRandom", "gridOptions"],
    "addUsingTransaction": ["Math", "createRowItem", "gridOptions"],
    "changeGroupUsingTransaction": [
      "pickExistingRowItemAtRandom",
      "gridOptions"
    ]
  },
  "onGridReady": "{\n    params.api.setRowData(createRowData());\n}",
  "template": "<div class=\"parent-container\">\n    <div class=\"top-container\">\n        <button onclick=\"updateOneRecord()\">Update One Value</button>\n        <button onclick=\"updateUsingTransaction()\">Update Using Transaction</button>\n        <button onclick=\"removeUsingTransaction()\">Remove Using Transaction</button>\n        <button onclick=\"addUsingTransaction()\">Add Using Transaction</button>\n        <button onclick=\"changeGroupUsingTransaction()\">Change Group Using Transaction</button>\n    </div>\n    <div class=\"center-container\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine-dark",
    "enterprise": true,
    "exampleHeight": 590
  }
}
