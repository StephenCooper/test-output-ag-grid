{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    // this row just shows the row index, doesn't use any data from the row\n    {\n        headerName: 'ID',\n        maxWidth: 100,\n        valueGetter: 'node.id',\n        cellRenderer: 'loadingRenderer',\n        // we don't want to sort by the row index, this doesn't make sense as the point\n        // of the row index is to know the row index in what came back from the server\n        sortable: false,\n        suppressMenu: true,\n    },\n    { headerName: 'Athlete', field: 'athlete', width: 150, suppressMenu: true },\n    {\n        field: 'age',\n        filter: 'agNumberColumnFilter',\n        filterParams: {\n            filterOptions: ['equals', 'lessThan', 'greaterThan'],\n        },\n    },\n    {\n        field: 'country',\n        filter: 'agSetColumnFilter',\n        filterParams: filterParams,\n    },\n    {\n        field: 'year',\n        filter: 'agSetColumnFilter',\n        filterParams: { values: ['2000', '2004', '2008', '2012'] },\n    },\n    { field: 'date' },\n    { field: 'sport', suppressMenu: true },\n    { field: 'gold', suppressMenu: true },\n    { field: 'silver', suppressMenu: true },\n    { field: 'bronze', suppressMenu: true },\n    { field: 'total', suppressMenu: true },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    resizable: true,\n    floatingFilter: true,\n}"
    },
    {
      "name": "components",
      "value": "{\n    loadingRenderer: function (params) {\n        if (params.value !== undefined) {\n            return params.value;\n        }\n        else {\n            return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n        }\n    },\n}"
    },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "rowModelType", "value": "'infinite'" },
    { "name": "cacheOverflowSize", "value": "2" },
    { "name": "maxConcurrentDatasourceRequests", "value": "2" },
    { "name": "infiniteInitialRowCount", "value": "1" },
    { "name": "maxBlocksInCache", "value": "2" },
    { "name": "pagination", "value": "true" },
    { "name": "cacheBlockSize", "value": "10" },
    {
      "name": "getRowNodeId",
      "value": "function (item) {\n    return item.id;\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    resizable: true,\n    floatingFilter: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'ID',\n    maxWidth: 100,\n    valueGetter: 'node.id',\n    cellRenderer: 'loadingRenderer',\n    // we don't want to sort by the row index, this doesn't make sense as the point\n// of the row index is to know the row index in what came back from the server\nsortable: false,\n    suppressMenu: true },\n    {\n        headerName: 'Athlete',\n    field: 'athlete',\n    width: 150,\n    suppressMenu: true },\n    {\n        field: 'age',\n    filter: 'agNumberColumnFilter',\n    filterParams : { filterOptions: ['equals', 'lessThan', 'greaterThan'] } },\n    {\n        field: 'country',\n    filter: 'agSetColumnFilter',\n    filterParams: 'AG_LITERAL_filterParams' },\n    {\n        field: 'year',\n    filter: 'agSetColumnFilter',\n    filterParams : { values: ['2000', '2004', '2008', '2012'] } },\n    { field: 'date' },\n    {\n        field: 'sport',\n    suppressMenu: true },\n    {\n        field: 'gold',\n    suppressMenu: true },\n    {\n        field: 'silver',\n    suppressMenu: true },\n    {\n        field: 'bronze',\n    suppressMenu: true },\n    {\n        field: 'total',\n    suppressMenu: true }]",
  "instanceMethods": [],
  "externalEventHandlers": [],
  "utils": [
    "var filterParams = { values: countries() };",
    "function sortAndFilter(allOfTheData, sortModel, filterModel) {\n    return sortData(sortModel, filterData(filterModel, allOfTheData));\n}",
    "function sortData(sortModel, data) {\n    var sortPresent = sortModel && sortModel.length > 0;\n    if (!sortPresent) {\n        return data;\n    }\n    // do an in memory sort of the data, across all the fields\n    var resultOfSort = data.slice();\n    resultOfSort.sort(function (a, b) {\n        for (var k = 0; k < sortModel.length; k++) {\n            var sortColModel = sortModel[k];\n            var valueA = a[sortColModel.colId];\n            var valueB = b[sortColModel.colId];\n            // this filter didn't find a difference, move onto the next one\n            if (valueA == valueB) {\n                continue;\n            }\n            var sortDirection = sortColModel.sort === 'asc' ? 1 : -1;\n            if (valueA > valueB) {\n                return sortDirection;\n            }\n            else {\n                return sortDirection * -1;\n            }\n        }\n        // no filters found a difference\n        return 0;\n    });\n    return resultOfSort;\n}",
    "function filterData(filterModel, data) {\n    var filterPresent = filterModel && Object.keys(filterModel).length > 0;\n    if (!filterPresent) {\n        return data;\n    }\n    var resultOfFilter = [];\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        if (filterModel.age) {\n            var age = item.age;\n            var allowedAge = parseInt(filterModel.age.filter);\n            // EQUALS = 1;\n            // LESS_THAN = 2;\n            // GREATER_THAN = 3;\n            if (filterModel.age.type == 'equals') {\n                if (age !== allowedAge) {\n                    continue;\n                }\n            }\n            else if (filterModel.age.type == 'lessThan') {\n                if (age >= allowedAge) {\n                    continue;\n                }\n            }\n            else {\n                if (age <= allowedAge) {\n                    continue;\n                }\n            }\n        }\n        if (filterModel.year) {\n            if (filterModel.year.indexOf(item.year.toString()) < 0) {\n                // year didn't match, so skip this record\n                continue;\n            }\n        }\n        if (filterModel.country) {\n            if (filterModel.country.indexOf(item.country) < 0) {\n                continue;\n            }\n        }\n        resultOfFilter.push(item);\n    }\n    return resultOfFilter;\n}"
  ],
  "callbackDependencies": {
    "sortAndFilter": ["sortData"],
    "filterData": ["Object", "parseInt"]
  },
  "data": {
    "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
    "callback": "{\n    // give each row an id\n    data.forEach(function (x, index) {\n        x.id = 'R' + (index + 1);\n    });\n    var dataSource = {\n        rowCount: undefined,\n        getRows: function (params) {\n            console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n            // At this point in your code, you would call the server, using $http if in AngularJS 1.x.\n            // To make the demo look real, wait for 500ms before returning\n            setTimeout(function () {\n                // take a slice of the total rows\n                var dataAfterSortingAndFiltering = sortAndFilter(data, params.sortModel, params.filterModel);\n                var rowsThisPage = dataAfterSortingAndFiltering.slice(params.startRow, params.endRow);\n                // if on or after the last page, work out the last row.\n                var lastRow = -1;\n                if (dataAfterSortingAndFiltering.length <= params.endRow) {\n                    lastRow = dataAfterSortingAndFiltering.length;\n                }\n                // call the success callback\n                params.successCallback(rowsThisPage, lastRow);\n            }, 500);\n        },\n    };\n    params.api.setDatasource(dataSource);\n}"
  },
  "template": "GRID_TEMPLATE_PLACEHOLDER\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 615,
    "modules": ["infinite", "setfilter", "menu", "columnpanel"]
  }
}
