{
  "eventHandlers": [],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        headerName: 'Item ID',\n        field: 'id',\n        valueGetter: 'node.id',\n        cellRenderer: 'loadingRenderer',\n    },\n    { field: 'make' },\n    { field: 'model' },\n    {\n        field: 'price',\n        valueFormatter: valueFormatter,\n    },\n]"
    },
    {
      "name": "datasource",
      "value": "{\n    rowCount: undefined,\n    getRows: function (params) {\n        console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n        // At this point in your code, you would call the server.\n        // To make the demo look real, wait for 500ms before returning\n        setTimeout(function () {\n            // take a slice of the total rows\n            var rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);\n            // make a copy of each row - this is what would happen if taking data from server\n            for (var i = 0; i < rowsThisPage.length; i++) {\n                var item = rowsThisPage[i];\n                // this is a trick to copy an object\n                var itemCopy = JSON.parse(JSON.stringify(item));\n                rowsThisPage[i] = itemCopy;\n            }\n            // if on or after the last page, work out the last row.\n            var lastRow = -1;\n            if (allOfTheData.length <= params.endRow) {\n                lastRow = allOfTheData.length;\n            }\n            // call the success callback\n            params.successCallback(rowsThisPage, lastRow);\n        }, 500);\n    },\n}"
    },
    {
      "name": "components",
      "value": "{\n    loadingRenderer: function (params) {\n        if (params.value !== undefined) {\n            return params.value;\n        }\n        else {\n            return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n        }\n    },\n}"
    },
    { "name": "defaultColDef", "value": "{\n    resizable: true,\n}" },
    { "name": "rowSelection", "value": "'multiple'" },
    { "name": "rowModelType", "value": "'infinite'" },
    { "name": "maxBlocksInCache", "value": "2" },
    { "name": "infiniteInitialRowCount", "value": "500" },
    { "name": "maxConcurrentDatasourceRequests", "value": "2" },
    {
      "name": "getRowNodeId",
      "value": "function (item) {\n    return item.id.toString();\n}"
    },
    {
      "name": "getRowStyle",
      "value": "function (params) {\n    if (params.data && params.data.make === 'Honda') {\n        return {\n            fontWeight: 'bold',\n        };\n    }\n    else {\n        return undefined;\n    }\n}"
    }
  ],
  "components": [],
  "defaultColDef": "{\n    resizable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        headerName: 'Item ID',\n    field: 'id',\n    valueGetter: 'node.id',\n    cellRenderer: 'loadingRenderer' },\n    { field: 'make' },\n    { field: 'model' },\n    {\n        field: 'price',\n    valueFormatter: 'AG_LITERAL_valueFormatter' }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "insertItemsAt2AndRefresh",
      "params": "5",
      "body": "function insertItemsAt2AndRefresh(count) {\n    insertItemsAt2(count);\n    // if the data has stopped looking for the last row, then we need to adjust the\n    // row count to allow for the extra data, otherwise the grid will not allow scrolling\n    // to the last row. eg if we have 1000 rows, scroll all the way to the bottom (so\n    // maxRowFound=true), and then add 5 rows, the rowCount needs to be adjusted\n    // to 1005, so grid can scroll to the end. the grid does NOT do this for you in the\n    // refreshVirtualPageCache() method, as this would be assuming you want to do it which\n    // is not true, maybe the row count is constant and you just want to refresh the details.\n    var maxRowFound = this.gridApi.isLastRowIndexKnown();\n    if (maxRowFound) {\n        var rowCount = this.gridApi.getInfiniteRowCount() || 0;\n        this.gridApi.setRowCount(rowCount + count);\n    }\n    // get grid to refresh the data\n    this.gridApi.refreshInfiniteCache();\n}"
    },
    {
      "name": "removeItem",
      "params": "3, 10",
      "body": "function removeItem(start, limit) {\n    allOfTheData.splice(start, limit);\n    this.gridApi.refreshInfiniteCache();\n}"
    },
    {
      "name": "refreshCache",
      "params": "",
      "body": "function refreshCache() {\n    this.gridApi.refreshInfiniteCache();\n}"
    },
    {
      "name": "purgeCache",
      "params": "",
      "body": "function purgeCache() {\n    this.gridApi.purgeInfiniteCache();\n}"
    },
    {
      "name": "setRowCountTo200",
      "params": "",
      "body": "function setRowCountTo200() {\n    this.gridApi.setRowCount(200, false);\n}"
    },
    {
      "name": "rowsAndMaxFound",
      "params": "",
      "body": "function rowsAndMaxFound() {\n    console.log('getInfiniteRowCount() => ' + this.gridApi.getInfiniteRowCount());\n    console.log('isLastRowIndexKnown() => ' + this.gridApi.isLastRowIndexKnown());\n}"
    },
    {
      "name": "setPricesHigh",
      "params": "",
      "body": "// function just gives new prices to the row data, it does not update the grid\nfunction setPricesHigh() {\n    allOfTheData.forEach(function (dataItem) {\n        dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n    });\n}"
    },
    {
      "name": "setPricesLow",
      "params": "",
      "body": "function setPricesLow() {\n    allOfTheData.forEach(function (dataItem) {\n        dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n    });\n}"
    },
    {
      "name": "printCacheState",
      "params": "",
      "body": "function printCacheState() {\n    console.log('*** Cache State ***');\n    console.log(this.gridApi.getCacheBlockState());\n}"
    },
    {
      "name": "jumpTo500",
      "params": "",
      "body": "function jumpTo500() {\n    // first up, need to make sure the grid is actually showing 500 or more rows\n    if ((this.gridApi.getInfiniteRowCount() || 0) < 501) {\n        this.gridApi.setRowCount(501, false);\n    }\n    // next, we can jump to the row\n    this.gridApi.ensureIndexVisible(500);\n}"
    }
  ],
  "utils": [
    "var valueFormatter = function (params) {\n    if (typeof params.value === 'number') {\n        return 'Â£' + params.value.toLocaleString();\n    }\n    else {\n        return params.value;\n    }\n};",
    "// this counter is used to give id's to the rows\nvar sequenceId = 0;",
    "var allOfTheData = [];",
    "function createRowData(id) {\n    var makes = ['Toyota', 'Ford', 'Porsche', 'Chevy', 'Honda', 'Nissan'];\n    var models = [\n        'Cruze',\n        'Celica',\n        'Mondeo',\n        'Boxter',\n        'Genesis',\n        'Accord',\n        'Taurus',\n    ];\n    return {\n        id: id,\n        make: makes[id % makes.length],\n        model: models[id % models.length],\n        price: 72000,\n    };\n}",
    "function insertItemsAt2(count) {\n    var newDataItems = [];\n    for (var i = 0; i < count; i++) {\n        var newItem = createRowData(sequenceId++);\n        allOfTheData.splice(2, 0, newItem);\n        newDataItems.push(newItem);\n    }\n    return newDataItems;\n}"
  ],
  "callbackDependencies": {
    "insertItemsAt2AndRefresh": ["insertItemsAt2", "gridOptions"],
    "insertItemsAt2": ["createRowData", "allOfTheData"],
    "removeItem": ["allOfTheData", "gridOptions"],
    "refreshCache": ["gridOptions"],
    "purgeCache": ["gridOptions"],
    "setRowCountTo200": ["gridOptions"],
    "setPricesHigh": ["allOfTheData"],
    "setPricesLow": ["allOfTheData"],
    "jumpTo500": ["gridOptions"]
  },
  "onGridReady": "{\n    sequenceId = 1;\n    allOfTheData = [];\n    for (var i = 0; i < 1000; i++) {\n        allOfTheData.push(createRowData(sequenceId++));\n    }\n}",
  "template": "<div style=\"display: flex; flex-direction: column; height: 100%;\">\n    <div style=\"margin-bottom: 10px;\">\n        <button onclick=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button onclick=\"removeItem(3, 10)\">Delete Rows</button>\n        <button onclick=\"setRowCountTo200()\">Set Row Count</button>\n        <button onclick=\"rowsAndMaxFound()\">Print Info</button>\n        <button onclick=\"jumpTo500()\">Jump to 500</button>\n        <button onclick=\"printCacheState()\">Print Cache State</button>\n    </div>\n    <div style=\"margin-bottom: 10px;\">\n        <button onclick=\"setPricesHigh()\">Set Prices High</button>\n        <button onclick=\"setPricesLow()\">Set Prices Low</button>\n        <button onclick=\"refreshCache()\">Refresh Cache</button>\n        <button onclick=\"purgeCache()\">Purge Cache</button>\n    </div>\n    <div style=\"flex-grow: 1;\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "modules": ["infinite"]
  }
}
