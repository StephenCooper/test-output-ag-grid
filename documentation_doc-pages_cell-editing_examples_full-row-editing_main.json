{
  "eventHandlers": [
    {
      "name": "cellValueChanged",
      "handlerName": "onCellValueChanged",
      "handler": "function onCellValueChanged(event) {\n    console.log('onCellValueChanged: ' + event.colDef.field + ' = ' + event.newValue);\n}"
    },
    {
      "name": "rowValueChanged",
      "handlerName": "onRowValueChanged",
      "handler": "function onRowValueChanged(event) {\n    var data = event.data;\n    console.log('onRowValueChanged: (' +\n        data.make +\n        ', ' +\n        data.model +\n        ', ' +\n        data.price +\n        ', ' +\n        data.field5 +\n        ')');\n}"
    }
  ],
  "properties": [
    {
      "name": "columnDefs",
      "value": "[\n    {\n        field: 'make',\n        cellEditor: 'agSelectCellEditor',\n        cellEditorParams: {\n            values: ['Porsche', 'Toyota', 'Ford', 'AAA', 'BBB', 'CCC'],\n        },\n    },\n    { field: 'model' },\n    { field: 'field4', headerName: 'Read Only', editable: false },\n    { field: 'price', cellEditor: 'numericCellEditor' },\n    {\n        headerName: 'Suppress Navigable',\n        field: 'field5',\n        suppressNavigable: true,\n        minWidth: 200,\n    },\n    { headerName: 'Read Only', field: 'field6', editable: false },\n]"
    },
    {
      "name": "defaultColDef",
      "value": "{\n    flex: 1,\n    editable: true,\n}"
    },
    {
      "name": "components",
      "value": "{\n    numericCellEditor: getNumericCellEditor(),\n}"
    },
    { "name": "editType", "value": "'fullRow'" },
    { "name": "rowData", "value": "getRowData()" }
  ],
  "components": [],
  "defaultColDef": "{\n    flex: 1,\n    editable: true,\n}",
  "globalComponents": [],
  "parsedColDefs": "[{\n        field: 'make',\n    cellEditor: 'agSelectCellEditor',\n    cellEditorParams : { values: ['Porsche', 'Toyota', 'Ford', 'AAA', 'BBB', 'CCC'] } },\n    { field: 'model' },\n    {\n        field: 'field4',\n    headerName: 'Read Only',\n    editable: false },\n    {\n        field: 'price',\n    cellEditor: 'numericCellEditor' },\n    {\n        headerName: 'Suppress Navigable',\n    field: 'field5',\n    suppressNavigable: true,\n    minWidth: 200 },\n    {\n        headerName: 'Read Only',\n    field: 'field6',\n    editable: false }]",
  "instanceMethods": [],
  "externalEventHandlers": [
    {
      "name": "onBtStopEditing",
      "params": "",
      "body": "function onBtStopEditing() {\n    this.gridApi.stopEditing();\n}"
    },
    {
      "name": "onBtStartEditing",
      "params": "",
      "body": "function onBtStartEditing() {\n    this.gridApi.setFocusedCell(2, 'make');\n    this.gridApi.startEditingCell({\n        rowIndex: 2,\n        colKey: 'make',\n    });\n}"
    }
  ],
  "utils": [
    "function getRowData() {\n    var rowData = [];\n    for (var i = 0; i < 10; i++) {\n        rowData.push({\n            make: 'Toyota',\n            model: 'Celica',\n            price: 35000 + i * 1000,\n            field4: 'Sample XX',\n            field5: 'Sample 22',\n            field6: 'Sample 23',\n        });\n        rowData.push({\n            make: 'Ford',\n            model: 'Mondeo',\n            price: 32000 + i * 1000,\n            field4: 'Sample YY',\n            field5: 'Sample 24',\n            field6: 'Sample 25',\n        });\n        rowData.push({\n            make: 'Porsche',\n            model: 'Boxter',\n            price: 72000 + i * 1000,\n            field4: 'Sample ZZ',\n            field5: 'Sample 26',\n            field6: 'Sample 27',\n        });\n    }\n    return rowData;\n}",
    "function getNumericCellEditor() {\n    function isCharNumeric(charStr) {\n        return !!/\\d/.test(charStr);\n    }\n    function isKeyPressedNumeric(event) {\n        var charStr = event.key;\n        return isCharNumeric(charStr);\n    }\n    class NumericCellEditor {\n        // gets called once before the renderer is used\n        init(params) {\n            // we only want to highlight this cell if it started the edit, it is possible\n            // another cell in this row started the edit\n            this.focusAfterAttached = params.cellStartedEdit;\n            // create the cell\n            this.eInput = document.createElement('input');\n            this.eInput.style.width = '100%';\n            this.eInput.style.height = '100%';\n            this.eInput.value = (params.charPress && isCharNumeric(params.charPress))\n                ? params.charPress\n                : params.value;\n            var that = this;\n            this.eInput.addEventListener('keypress', function (event) {\n                if (!isKeyPressedNumeric(event)) {\n                    that.eInput.focus();\n                    if (event.preventDefault)\n                        event.preventDefault();\n                }\n            });\n        }\n        // gets called once when grid ready to insert the element\n        getGui() {\n            return this.eInput;\n        }\n        // focus and select can be done after the gui is attached\n        afterGuiAttached() {\n            // only focus after attached if this cell started the edit\n            if (this.focusAfterAttached) {\n                this.eInput.focus();\n                this.eInput.select();\n            }\n        }\n        // returns the new value after editing\n        isCancelBeforeStart() {\n            return this.cancelBeforeStart;\n        }\n        // example - will reject the number if it contains the value 007\n        // - not very practical, but demonstrates the method.\n        isCancelAfterEnd() {\n            return false;\n        }\n        // returns the new value after editing\n        getValue() {\n            return this.eInput.value;\n        }\n        // when we tab onto this editor, we want to focus the contents\n        focusIn() {\n            var eInput = this.getGui();\n            eInput.focus();\n            eInput.select();\n            console.log('NumericCellEditor.focusIn()');\n        }\n        // when we tab out of the editor, this gets called\n        focusOut() {\n            // but we don't care, we just want to print it for demo purposes\n            console.log('NumericCellEditor.focusOut()');\n        }\n    }\n    return NumericCellEditor;\n}"
  ],
  "callbackDependencies": {
    "onBtStopEditing": ["gridOptions"],
    "onBtStartEditing": ["gridOptions"],
    "getNumericCellEditor": [
      "isCharNumeric",
      "/\\d/",
      "isKeyPressedNumeric",
      "event"
    ]
  },
  "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button style=\"font-size: 12px\" onclick=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" onclick=\"onBtStopEditing()\">Stop Editing</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
  "gridSettings": {
    "width": "100%",
    "height": "100%",
    "theme": "ag-theme-alpine",
    "enterprise": true,
    "exampleHeight": 527,
    "modules": ["clientside", "menu", "columnpanel"]
  }
}
